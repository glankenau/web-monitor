
Web Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006474  08006474  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006474  08006474  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800647c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000010  0800648c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a64  0800648c  00021a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1ff  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035e8  00000000  00000000  0003c23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00040e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bed  00000000  00000000  00042240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014fb9  00000000  00000000  00064e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d80bc  00000000  00000000  00079de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151ea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b38  00000000  00000000  00151f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063dc 	.word	0x080063dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080063dc 	.word	0x080063dc

080001e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08a      	sub	sp, #40	; 0x28
 80001e4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80001e6:	f107 031c 	add.w	r3, r7, #28
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
 8000200:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000204:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000208:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800020a:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <MX_ADC1_Init+0xdc>)
 800020c:	2200      	movs	r2, #0
 800020e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000216:	4b29      	ldr	r3, [pc, #164]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000218:	2200      	movs	r2, #0
 800021a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <MX_ADC1_Init+0xdc>)
 800021e:	2200      	movs	r2, #0
 8000220:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000222:	4b26      	ldr	r3, [pc, #152]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022a:	4b24      	ldr	r3, [pc, #144]	; (80002bc <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000230:	4b22      	ldr	r3, [pc, #136]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000232:	2201      	movs	r2, #1
 8000234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <MX_ADC1_Init+0xdc>)
 800023e:	2201      	movs	r2, #1
 8000240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000242:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MX_ADC1_Init+0xdc>)
 800024c:	2204      	movs	r2, #4
 800024e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000252:	2200      	movs	r2, #0
 8000254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800025c:	4817      	ldr	r0, [pc, #92]	; (80002bc <MX_ADC1_Init+0xdc>)
 800025e:	f000 fb4d 	bl	80008fc <HAL_ADC_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000268:	f000 fa34 	bl	80006d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000270:	f107 031c 	add.w	r3, r7, #28
 8000274:	4619      	mov	r1, r3
 8000276:	4811      	ldr	r0, [pc, #68]	; (80002bc <MX_ADC1_Init+0xdc>)
 8000278:	f001 f826 	bl	80012c8 <HAL_ADCEx_MultiModeConfigChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000282:	f000 fa27 	bl	80006d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000286:	2301      	movs	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028a:	2301      	movs	r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <MX_ADC1_Init+0xdc>)
 80002a4:	f000 fd24 	bl	8000cf0 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002ae:	f000 fa11 	bl	80006d4 <Error_Handler>
  }

}
 80002b2:	bf00      	nop
 80002b4:	3728      	adds	r7, #40	; 0x28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20001934 	.word	0x20001934

080002c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002e0:	d124      	bne.n	800032c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <HAL_ADC_MspInit+0x74>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a13      	ldr	r2, [pc, #76]	; (8000334 <HAL_ADC_MspInit+0x74>)
 80002e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <HAL_ADC_MspInit+0x74>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	613b      	str	r3, [r7, #16]
 80002f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <HAL_ADC_MspInit+0x74>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <HAL_ADC_MspInit+0x74>)
 8000300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <HAL_ADC_MspInit+0x74>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000312:	2307      	movs	r3, #7
 8000314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000316:	2303      	movs	r3, #3
 8000318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f001 fa02 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800032c:	bf00      	nop
 800032e:	3728      	adds	r7, #40	; 0x28
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000

08000338 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <MX_FREERTOS_Init+0x18>)
 800033e:	2100      	movs	r1, #0
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_FREERTOS_Init+0x1c>)
 8000342:	f003 fb75 	bl	8003a30 <osThreadNew>
 8000346:	4602      	mov	r2, r0
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <MX_FREERTOS_Init+0x20>)
 800034a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	08006418 	.word	0x08006418
 8000354:	0800035d 	.word	0x0800035d
 8000358:	20001984 	.word	0x20001984

0800035c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f003 fc0d 	bl	8003b84 <osDelay>
 800036a:	e7fb      	b.n	8000364 <StartDefaultTask+0x8>

0800036c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <MX_GPIO_Init+0x140>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a49      	ldr	r2, [pc, #292]	; (80004ac <MX_GPIO_Init+0x140>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b47      	ldr	r3, [pc, #284]	; (80004ac <MX_GPIO_Init+0x140>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b44      	ldr	r3, [pc, #272]	; (80004ac <MX_GPIO_Init+0x140>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a43      	ldr	r2, [pc, #268]	; (80004ac <MX_GPIO_Init+0x140>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b41      	ldr	r3, [pc, #260]	; (80004ac <MX_GPIO_Init+0x140>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <MX_GPIO_Init+0x140>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <MX_GPIO_Init+0x140>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b3b      	ldr	r3, [pc, #236]	; (80004ac <MX_GPIO_Init+0x140>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b38      	ldr	r3, [pc, #224]	; (80004ac <MX_GPIO_Init+0x140>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a37      	ldr	r2, [pc, #220]	; (80004ac <MX_GPIO_Init+0x140>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b35      	ldr	r3, [pc, #212]	; (80004ac <MX_GPIO_Init+0x140>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e2:	4b32      	ldr	r3, [pc, #200]	; (80004ac <MX_GPIO_Init+0x140>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a31      	ldr	r2, [pc, #196]	; (80004ac <MX_GPIO_Init+0x140>)
 80003e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b2f      	ldr	r3, [pc, #188]	; (80004ac <MX_GPIO_Init+0x140>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GreenLED_GPIO_Port, GreenLED_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2120      	movs	r1, #32
 80003fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000402:	f001 fb1f 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040c:	2303      	movs	r3, #3
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	4619      	mov	r1, r3
 800041a:	4825      	ldr	r0, [pc, #148]	; (80004b0 <MX_GPIO_Init+0x144>)
 800041c:	f001 f988 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000420:	2303      	movs	r3, #3
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000424:	2303      	movs	r3, #3
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4619      	mov	r1, r3
 8000432:	4820      	ldr	r0, [pc, #128]	; (80004b4 <MX_GPIO_Init+0x148>)
 8000434:	f001 f97c 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000438:	f649 73d8 	movw	r3, #40920	; 0x9fd8
 800043c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043e:	2303      	movs	r3, #3
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f107 0314 	add.w	r3, r7, #20
 800044a:	4619      	mov	r1, r3
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f001 f96e 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GreenLED_Pin;
 8000454:	2320      	movs	r3, #32
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GreenLED_GPIO_Port, &GPIO_InitStruct);
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	4619      	mov	r1, r3
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f001 f95f 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000472:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000476:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000478:	2303      	movs	r3, #3
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	480c      	ldr	r0, [pc, #48]	; (80004b8 <MX_GPIO_Init+0x14c>)
 8000488:	f001 f952 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800048c:	2304      	movs	r3, #4
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000490:	2303      	movs	r3, #3
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4619      	mov	r1, r3
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <MX_GPIO_Init+0x150>)
 80004a0:	f001 f946 	bl	8001730 <HAL_GPIO_Init>

}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	; 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800
 80004b4:	48001400 	.word	0x48001400
 80004b8:	48000400 	.word	0x48000400
 80004bc:	48000c00 	.word	0x48000c00

080004c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_I2C1_Init+0x74>)
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <MX_I2C1_Init+0x78>)
 80004c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_I2C1_Init+0x74>)
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <MX_I2C1_Init+0x7c>)
 80004ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_I2C1_Init+0x74>)
 80004d8:	2201      	movs	r2, #1
 80004da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004e2:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_I2C1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <MX_I2C1_Init+0x74>)
 80004fc:	f001 faba 	bl	8001a74 <HAL_I2C_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000506:	f000 f8e5 	bl	80006d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <MX_I2C1_Init+0x74>)
 800050e:	f001 fb40 	bl	8001b92 <HAL_I2CEx_ConfigAnalogFilter>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000518:	f000 f8dc 	bl	80006d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800051c:	2100      	movs	r1, #0
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_I2C1_Init+0x74>)
 8000520:	f001 fb82 	bl	8001c28 <HAL_I2CEx_ConfigDigitalFilter>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f000 f8d3 	bl	80006d4 <Error_Handler>
  }

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20001988 	.word	0x20001988
 8000538:	40005400 	.word	0x40005400
 800053c:	2000090e 	.word	0x2000090e

08000540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_I2C_MspInit+0x7c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d127      	bne.n	80005b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 8000568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057e:	2312      	movs	r3, #18
 8000580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000582:	2301      	movs	r3, #1
 8000584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800058a:	2304      	movs	r3, #4
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <HAL_I2C_MspInit+0x84>)
 8000596:	f001 f8cb 	bl	8001730 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_I2C_MspInit+0x80>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	; 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40005400 	.word	0x40005400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000400 	.word	0x48000400

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 f960 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f80d 	bl	80005ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff feca 	bl	800036c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d8:	f7ff fe02 	bl	80001e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005dc:	f7ff ff70 	bl	80004c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005e0:	f003 f9be 	bl	8003960 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005e4:	f7ff fea8 	bl	8000338 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005e8:	f003 f9ee 	bl	80039c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x24>

080005ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b0a6      	sub	sp, #152	; 0x98
 80005f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f8:	2228      	movs	r2, #40	; 0x28
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 fee4 	bl	80063ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2258      	movs	r2, #88	; 0x58
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fed6 	bl	80063ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800063a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fb37 	bl	8001cc0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000658:	f000 f83c 	bl	80006d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fa37 	bl	8002aec <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000684:	f000 f826 	bl	80006d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fc6d 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a4:	f000 f816 	bl	80006d4 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3798      	adds	r7, #152	; 0x98
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c2:	f000 f8fb 	bl	80008bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006da:	e7fe      	b.n	80006da <Error_Handler+0x6>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_MspInit+0x4c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <HAL_MspInit+0x4c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_MspInit+0x4c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_MspInit+0x4c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_MspInit+0x4c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_MspInit+0x4c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	210f      	movs	r1, #15
 8000716:	f06f 0001 	mvn.w	r0, #1
 800071a:	f000 ffdf 	bl	80016dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2019      	movs	r0, #25
 8000742:	f000 ffcb 	bl	80016dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000746:	2019      	movs	r0, #25
 8000748:	f000 ffe4 	bl	8001714 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <HAL_InitTick+0x9c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <HAL_InitTick+0x9c>)
 8000752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <HAL_InitTick+0x9c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000764:	f107 0210 	add.w	r2, r7, #16
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fbd0 	bl	8002f14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000774:	f002 fbac 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8000778:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <HAL_InitTick+0xa0>)
 800077e:	fba2 2303 	umull	r2, r3, r2, r3
 8000782:	0c9b      	lsrs	r3, r3, #18
 8000784:	3b01      	subs	r3, #1
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_InitTick+0xa4>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <HAL_InitTick+0xa8>)
 800078c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_InitTick+0xa4>)
 8000790:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000794:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_InitTick+0xa4>)
 8000798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_InitTick+0xa4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_InitTick+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <HAL_InitTick+0xa4>)
 80007aa:	f002 fe03 	bl	80033b4 <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d104      	bne.n	80007be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <HAL_InitTick+0xa4>)
 80007b6:	f002 fe5f 	bl	8003478 <HAL_TIM_Base_Start_IT>
 80007ba:	4603      	mov	r3, r0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3730      	adds	r7, #48	; 0x30
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	431bde83 	.word	0x431bde83
 80007d0:	200019d4 	.word	0x200019d4
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800080a:	f002 fea5 	bl	8003558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200019d4 	.word	0x200019d4

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0b      	ldr	r4, [pc, #44]	; (8000888 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000866:	f7ff ffd7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f005 fd7f 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff feab 	bl	80005c8 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000874:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000880:	0800647c 	.word	0x0800647c
  ldr r2, =_sbss
 8000884:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000888:	20001a64 	.word	0x20001a64

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 ff10 	bl	80016c6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff40 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff ff16 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20001a20 	.word	0x20001a20

080008e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20001a20 	.word	0x20001a20

080008fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09a      	sub	sp, #104	; 0x68
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800090a:	2300      	movs	r3, #0
 800090c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e1e3      	b.n	8000ce4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	2b00      	cmp	r3, #0
 800092c:	d176      	bne.n	8000a1c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	2b00      	cmp	r3, #0
 8000934:	d152      	bne.n	80009dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fcb5 	bl	80002c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d13b      	bne.n	80009dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 fda1 	bl	80014ac <ADC_Disable>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	2b00      	cmp	r3, #0
 800097a:	d12f      	bne.n	80009dc <HAL_ADC_Init+0xe0>
 800097c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000980:	2b00      	cmp	r3, #0
 8000982:	d12b      	bne.n	80009dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800098c:	f023 0302 	bic.w	r3, r3, #2
 8000990:	f043 0202 	orr.w	r2, r3, #2
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009b8:	4b92      	ldr	r3, [pc, #584]	; (8000c04 <HAL_ADC_Init+0x308>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a92      	ldr	r2, [pc, #584]	; (8000c08 <HAL_ADC_Init+0x30c>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9a      	lsrs	r2, r3, #18
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009ce:	e002      	b.n	80009d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f9      	bne.n	80009d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009f8:	d110      	bne.n	8000a1c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f023 0312 	bic.w	r3, r3, #18
 8000a02:	f043 0210 	orr.w	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f040 8150 	bne.w	8000cca <HAL_ADC_Init+0x3ce>
 8000a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 814b 	bne.w	8000cca <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8143 	bne.w	8000cca <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a4c:	f043 0202 	orr.w	r2, r3, #2
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a5c:	d004      	beq.n	8000a68 <HAL_ADC_Init+0x16c>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a6a      	ldr	r2, [pc, #424]	; (8000c0c <HAL_ADC_Init+0x310>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d101      	bne.n	8000a6c <HAL_ADC_Init+0x170>
 8000a68:	4b69      	ldr	r3, [pc, #420]	; (8000c10 <HAL_ADC_Init+0x314>)
 8000a6a:	e000      	b.n	8000a6e <HAL_ADC_Init+0x172>
 8000a6c:	4b69      	ldr	r3, [pc, #420]	; (8000c14 <HAL_ADC_Init+0x318>)
 8000a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a78:	d102      	bne.n	8000a80 <HAL_ADC_Init+0x184>
 8000a7a:	4b64      	ldr	r3, [pc, #400]	; (8000c0c <HAL_ADC_Init+0x310>)
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e01a      	b.n	8000ab6 <HAL_ADC_Init+0x1ba>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a61      	ldr	r2, [pc, #388]	; (8000c0c <HAL_ADC_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d103      	bne.n	8000a92 <HAL_ADC_Init+0x196>
 8000a8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e011      	b.n	8000ab6 <HAL_ADC_Init+0x1ba>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a60      	ldr	r2, [pc, #384]	; (8000c18 <HAL_ADC_Init+0x31c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d102      	bne.n	8000aa2 <HAL_ADC_Init+0x1a6>
 8000a9c:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <HAL_ADC_Init+0x320>)
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e009      	b.n	8000ab6 <HAL_ADC_Init+0x1ba>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <HAL_ADC_Init+0x320>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_ADC_Init+0x1b6>
 8000aac:	4b5a      	ldr	r3, [pc, #360]	; (8000c18 <HAL_ADC_Init+0x31c>)
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	e001      	b.n	8000ab6 <HAL_ADC_Init+0x1ba>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d108      	bne.n	8000ad6 <HAL_ADC_Init+0x1da>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d101      	bne.n	8000ad6 <HAL_ADC_Init+0x1da>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11c      	bne.n	8000b16 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000adc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d010      	beq.n	8000b04 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d107      	bne.n	8000afe <HAL_ADC_Init+0x202>
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Init+0x202>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_ADC_Init+0x204>
 8000afe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d108      	bne.n	8000b16 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7e5b      	ldrb	r3, [r3, #25]
 8000b1a:	035b      	lsls	r3, r3, #13
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b20:	2a01      	cmp	r2, #1
 8000b22:	d002      	beq.n	8000b2a <HAL_ADC_Init+0x22e>
 8000b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b28:	e000      	b.n	8000b2c <HAL_ADC_Init+0x230>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d11b      	bne.n	8000b82 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7e5b      	ldrb	r3, [r3, #25]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d109      	bne.n	8000b66 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	3b01      	subs	r3, #1
 8000b58:	045a      	lsls	r2, r3, #17
 8000b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
 8000b64:	e00d      	b.n	8000b82 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b6e:	f043 0220 	orr.w	r2, r3, #32
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f043 0201 	orr.w	r2, r3, #1
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d054      	beq.n	8000c34 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <HAL_ADC_Init+0x31c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d004      	beq.n	8000b9e <HAL_ADC_Init+0x2a2>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_ADC_Init+0x320>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d140      	bne.n	8000c20 <HAL_ADC_Init+0x324>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000ba6:	d02a      	beq.n	8000bfe <HAL_ADC_Init+0x302>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb0:	d022      	beq.n	8000bf8 <HAL_ADC_Init+0x2fc>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000bba:	d01a      	beq.n	8000bf2 <HAL_ADC_Init+0x2f6>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000bc4:	d012      	beq.n	8000bec <HAL_ADC_Init+0x2f0>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000bce:	d00a      	beq.n	8000be6 <HAL_ADC_Init+0x2ea>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000bd8:	d002      	beq.n	8000be0 <HAL_ADC_Init+0x2e4>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bde:	e023      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000be0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be4:	e020      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000be6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bea:	e01d      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000bec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000bf0:	e01a      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	e017      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000bf8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000bfc:	e014      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000bfe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c02:	e011      	b.n	8000c28 <HAL_ADC_Init+0x32c>
 8000c04:	20000000 	.word	0x20000000
 8000c08:	431bde83 	.word	0x431bde83
 8000c0c:	50000100 	.word	0x50000100
 8000c10:	50000300 	.word	0x50000300
 8000c14:	50000700 	.word	0x50000700
 8000c18:	50000400 	.word	0x50000400
 8000c1c:	50000500 	.word	0x50000500
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c30:	4313      	orrs	r3, r2
 8000c32:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d114      	bne.n	8000c6c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c50:	f023 0302 	bic.w	r3, r3, #2
 8000c54:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7e1b      	ldrb	r3, [r3, #24]
 8000c5a:	039a      	lsls	r2, r3, #14
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4313      	orrs	r3, r2
 8000c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_ADC_Init+0x3f0>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d10c      	bne.n	8000ca2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f023 010f 	bic.w	r1, r3, #15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000ca0:	e007      	b.n	8000cb2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 020f 	bic.w	r2, r2, #15
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f023 0303 	bic.w	r3, r3, #3
 8000cc0:	f043 0201 	orr.w	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc8:	e00a      	b.n	8000ce0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f023 0312 	bic.w	r3, r3, #18
 8000cd2:	f043 0210 	orr.w	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ce0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3768      	adds	r7, #104	; 0x68
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	fff0c007 	.word	0xfff0c007

08000cf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b09b      	sub	sp, #108	; 0x6c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_ConfigChannel+0x22>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e2cb      	b.n	80012aa <HAL_ADC_ConfigChannel+0x5ba>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f040 82af 	bne.w	8001288 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d81c      	bhi.n	8000d6c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	461a      	mov	r2, r3
 8000d46:	231f      	movs	r3, #31
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	4019      	ands	r1, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6a:	e063      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	d81e      	bhi.n	8000db2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	3b1e      	subs	r3, #30
 8000d88:	221f      	movs	r2, #31
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4019      	ands	r1, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	3b1e      	subs	r3, #30
 8000da4:	fa00 f203 	lsl.w	r2, r0, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
 8000db0:	e040      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b0e      	cmp	r3, #14
 8000db8:	d81e      	bhi.n	8000df8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	3b3c      	subs	r3, #60	; 0x3c
 8000dce:	221f      	movs	r2, #31
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	3b3c      	subs	r3, #60	; 0x3c
 8000dea:	fa00 f203 	lsl.w	r2, r0, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
 8000df6:	e01d      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	3b5a      	subs	r3, #90	; 0x5a
 8000e0c:	221f      	movs	r2, #31
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4019      	ands	r1, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	3b5a      	subs	r3, #90	; 0x5a
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80e5 	bne.w	800100e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	d91c      	bls.n	8000e86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6999      	ldr	r1, [r3, #24]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3b1e      	subs	r3, #30
 8000e5e:	2207      	movs	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4019      	ands	r1, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	6898      	ldr	r0, [r3, #8]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	3b1e      	subs	r3, #30
 8000e78:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	619a      	str	r2, [r3, #24]
 8000e84:	e019      	b.n	8000eba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6959      	ldr	r1, [r3, #20]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	2207      	movs	r2, #7
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4019      	ands	r1, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d84f      	bhi.n	8000f7c <HAL_ADC_ConfigChannel+0x28c>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <HAL_ADC_ConfigChannel+0x1f4>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000ef5 	.word	0x08000ef5
 8000ee8:	08000f17 	.word	0x08000f17
 8000eec:	08000f39 	.word	0x08000f39
 8000ef0:	08000f5b 	.word	0x08000f5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000efa:	4b9f      	ldr	r3, [pc, #636]	; (8001178 <HAL_ADC_ConfigChannel+0x488>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	0691      	lsls	r1, r2, #26
 8000f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f06:	430a      	orrs	r2, r1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f12:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f14:	e07e      	b.n	8001014 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f1c:	4b96      	ldr	r3, [pc, #600]	; (8001178 <HAL_ADC_ConfigChannel+0x488>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	0691      	lsls	r1, r2, #26
 8000f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f34:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f36:	e06d      	b.n	8001014 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f3e:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <HAL_ADC_ConfigChannel+0x488>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	0691      	lsls	r1, r2, #26
 8000f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f56:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f58:	e05c      	b.n	8001014 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f60:	4b85      	ldr	r3, [pc, #532]	; (8001178 <HAL_ADC_ConfigChannel+0x488>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	0691      	lsls	r1, r2, #26
 8000f6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f78:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f7a:	e04b      	b.n	8001014 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	069b      	lsls	r3, r3, #26
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d107      	bne.n	8000fa0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f9e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	069b      	lsls	r3, r3, #26
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d107      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fc2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	069b      	lsls	r3, r3, #26
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d107      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fe6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	069b      	lsls	r3, r3, #26
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d10a      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800100a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800100c:	e001      	b.n	8001012 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001012:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x344>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x344>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_ADC_ConfigChannel+0x346>
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 8131 	bne.w	800129e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00f      	beq.n	8001064 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	400a      	ands	r2, r1
 800105e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001062:	e049      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b09      	cmp	r3, #9
 8001084:	d91c      	bls.n	80010c0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6999      	ldr	r1, [r3, #24]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	3b1b      	subs	r3, #27
 8001098:	2207      	movs	r2, #7
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	4019      	ands	r1, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6898      	ldr	r0, [r3, #8]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	3b1b      	subs	r3, #27
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	619a      	str	r2, [r3, #24]
 80010be:	e01b      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6959      	ldr	r1, [r3, #20]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	2207      	movs	r2, #7
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001100:	d004      	beq.n	800110c <HAL_ADC_ConfigChannel+0x41c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_ADC_ConfigChannel+0x48c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x420>
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_ADC_ConfigChannel+0x490>)
 800110e:	e000      	b.n	8001112 <HAL_ADC_ConfigChannel+0x422>
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_ADC_ConfigChannel+0x494>)
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b10      	cmp	r3, #16
 800111a:	d105      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800111c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800112c:	2b11      	cmp	r3, #17
 800112e:	d105      	bne.n	800113c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001140:	2b12      	cmp	r3, #18
 8001142:	f040 80ac 	bne.w	800129e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80a5 	bne.w	800129e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800115c:	d102      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x474>
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_ADC_ConfigChannel+0x48c>)
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e023      	b.n	80011ac <HAL_ADC_ConfigChannel+0x4bc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_ADC_ConfigChannel+0x48c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x498>
 800116e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e01a      	b.n	80011ac <HAL_ADC_ConfigChannel+0x4bc>
 8001176:	bf00      	nop
 8001178:	83fff000 	.word	0x83fff000
 800117c:	50000100 	.word	0x50000100
 8001180:	50000300 	.word	0x50000300
 8001184:	50000700 	.word	0x50000700
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_ADC_ConfigChannel+0x5c8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d102      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x4a8>
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_ADC_ConfigChannel+0x5cc>)
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e009      	b.n	80011ac <HAL_ADC_ConfigChannel+0x4bc>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_ADC_ConfigChannel+0x5cc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d102      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x4b8>
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_ADC_ConfigChannel+0x5c8>)
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e001      	b.n	80011ac <HAL_ADC_ConfigChannel+0x4bc>
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x4dc>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x4dc>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_ADC_ConfigChannel+0x4de>
 80011cc:	2300      	movs	r3, #0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d150      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d010      	beq.n	80011fa <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x504>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x504>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x506>
 80011f4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d13c      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d11d      	bne.n	800123e <HAL_ADC_ConfigChannel+0x54e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800120a:	d118      	bne.n	800123e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800120c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001216:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <HAL_ADC_ConfigChannel+0x5d0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_ADC_ConfigChannel+0x5d4>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0c9a      	lsrs	r2, r3, #18
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122e:	e002      	b.n	8001236 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800123c:	e02e      	b.n	800129c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b11      	cmp	r3, #17
 8001244:	d10b      	bne.n	800125e <HAL_ADC_ConfigChannel+0x56e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124e:	d106      	bne.n	800125e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800125c:	e01e      	b.n	800129c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b12      	cmp	r3, #18
 8001264:	d11a      	bne.n	800129c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800126e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001270:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001272:	e013      	b.n	800129c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f043 0220 	orr.w	r2, r3, #32
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001286:	e00a      	b.n	800129e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f043 0220 	orr.w	r2, r3, #32
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800129a:	e000      	b.n	800129e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800129c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	376c      	adds	r7, #108	; 0x6c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	50000400 	.word	0x50000400
 80012bc:	50000500 	.word	0x50000500
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b099      	sub	sp, #100	; 0x64
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e0:	d102      	bne.n	80012e8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	e01a      	b.n	800131e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d103      	bne.n	80012fa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80012f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e011      	b.n	800131e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a67      	ldr	r2, [pc, #412]	; (800149c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d102      	bne.n	800130a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	e009      	b.n	800131e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a64      	ldr	r2, [pc, #400]	; (80014a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d102      	bne.n	800131a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e001      	b.n	800131e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0b0      	b.n	800148a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001332:	2302      	movs	r3, #2
 8001334:	e0a9      	b.n	800148a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 808d 	bne.w	8001468 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 8086 	bne.w	8001468 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001364:	d004      	beq.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001372:	e000      	b.n	8001376 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001376:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d040      	beq.n	8001402 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001392:	035b      	lsls	r3, r3, #13
 8001394:	430b      	orrs	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80013bc:	2300      	movs	r3, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d15c      	bne.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80013de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d14b      	bne.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80013e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	6811      	ldr	r1, [r2, #0]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	6892      	ldr	r2, [r2, #8]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001400:	e03c      	b.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800140a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800140c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800142e:	2300      	movs	r3, #0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d123      	bne.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d107      	bne.n	8001450 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001450:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d112      	bne.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800145e:	f023 030f 	bic.w	r3, r3, #15
 8001462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001464:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001466:	e009      	b.n	800147c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800147a:	e000      	b.n	800147e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800147c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800148a:	4618      	mov	r0, r3
 800148c:	3764      	adds	r7, #100	; 0x64
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	50000100 	.word	0x50000100
 800149c:	50000400 	.word	0x50000400
 80014a0:	50000500 	.word	0x50000500
 80014a4:	50000300 	.word	0x50000300
 80014a8:	50000700 	.word	0x50000700

080014ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <ADC_Disable+0x2c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <ADC_Disable+0x2c>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <ADC_Disable+0x2e>
 80014d8:	2300      	movs	r3, #0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d040      	beq.n	8001560 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030d 	and.w	r3, r3, #13
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10f      	bne.n	800150c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0202 	orr.w	r2, r2, #2
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2203      	movs	r2, #3
 8001502:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001504:	f7ff f9ee 	bl	80008e4 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800150a:	e022      	b.n	8001552 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f043 0210 	orr.w	r2, r3, #16
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e01c      	b.n	8001562 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001528:	f7ff f9dc 	bl	80008e4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d90d      	bls.n	8001552 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e007      	b.n	8001562 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d0e3      	beq.n	8001528 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff4c 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ee:	f7ff ff61 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f7ff ffb1 	bl	8001660 <NVIC_EncodePriority>
 80016fe:	4602      	mov	r2, r0
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff80 	bl	800160c <__NVIC_SetPriority>
}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff54 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e160      	b.n	8001a02 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8152 	beq.w	80019fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d00b      	beq.n	8001778 <HAL_GPIO_Init+0x48>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176c:	2b11      	cmp	r3, #17
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0xea>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d123      	bne.n	8001862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0203 	and.w	r2, r3, #3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80ac 	beq.w	80019fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_GPIO_Init+0x2f0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018bc:	4a59      	ldr	r2, [pc, #356]	; (8001a24 <HAL_GPIO_Init+0x2f4>)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e6:	d025      	beq.n	8001934 <HAL_GPIO_Init+0x204>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x2f8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d01f      	beq.n	8001930 <HAL_GPIO_Init+0x200>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x2fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_GPIO_Init+0x1fc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x300>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_GPIO_Init+0x1f8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x304>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1f4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x308>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1f0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x30c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1ec>
 8001918:	2306      	movs	r3, #6
 800191a:	e00c      	b.n	8001936 <HAL_GPIO_Init+0x206>
 800191c:	2307      	movs	r3, #7
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001920:	2305      	movs	r3, #5
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x206>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x206>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2f4>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_GPIO_Init+0x310>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_GPIO_Init+0x310>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_GPIO_Init+0x310>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019a2:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019cc:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_GPIO_Init+0x310>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f ae97 	bne.w	8001740 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	48001800 	.word	0x48001800
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e081      	b.n	8001b8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fd50 	bl	8000540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e006      	b.n	8001afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d104      	bne.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69d9      	ldr	r1, [r3, #28]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d138      	bne.n	8001c1a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e032      	b.n	8001c1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2224      	movs	r2, #36	; 0x24
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001be4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d139      	bne.n	8001cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e033      	b.n	8001cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb2:	2302      	movs	r3, #2
  }
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f000 bf01 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8160 	beq.w	8001faa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cea:	4bae      	ldr	r3, [pc, #696]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d00c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf6:	4bab      	ldr	r3, [pc, #684]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d159      	bne.n	8001db6 <HAL_RCC_OscConfig+0xf6>
 8001d02:	4ba8      	ldr	r3, [pc, #672]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d152      	bne.n	8001db6 <HAL_RCC_OscConfig+0xf6>
 8001d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x82>
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0xae>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d72:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d7a:	fa92 f2a2 	rbit	r2, r2
 8001d7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8102 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x2e8>
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80fc 	bne.w	8001fa8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f000 be93 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x110>
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e030      	b.n	8001e32 <HAL_RCC_OscConfig+0x172>
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x134>
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a71      	ldr	r2, [pc, #452]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01e      	b.n	8001e32 <HAL_RCC_OscConfig+0x172>
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x15a>
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a67      	ldr	r2, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a64      	ldr	r2, [pc, #400]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x172>
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a61      	ldr	r2, [pc, #388]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a5e      	ldr	r2, [pc, #376]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d059      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fd52 	bl	80008e4 <HAL_GetTick>
 8001e40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e46:	f7fe fd4d 	bl	80008e4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d902      	bls.n	8001e5c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	f000 be40 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e60:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1ce>
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x1fa>
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001eaa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ebe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ec2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001ec6:	fa92 f2a2 	rbit	r2, r2
 8001eca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ece:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f042 0220 	orr.w	r2, r2, #32
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f002 021f 	and.w	r2, r2, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ab      	beq.n	8001e46 <HAL_RCC_OscConfig+0x186>
 8001eee:	e05c      	b.n	8001faa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe fcf8 	bl	80008e4 <HAL_GetTick>
 8001ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efa:	f7fe fcf3 	bl	80008e4 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d902      	bls.n	8001f10 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f000 bde6 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x282>
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x2ae>
 8001f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_RCC_OscConfig+0x2e4>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f7a:	fa92 f2a2 	rbit	r2, r2
 8001f7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ab      	bne.n	8001efa <HAL_RCC_OscConfig+0x23a>
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_OscConfig+0x2ea>
 8001fa4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8170 	beq.w	800229a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fba:	4bd0      	ldr	r3, [pc, #832]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fc6:	4bcd      	ldr	r3, [pc, #820]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d16d      	bne.n	80020ae <HAL_RCC_OscConfig+0x3ee>
 8001fd2:	4bca      	ldr	r3, [pc, #808]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fde:	d166      	bne.n	80020ae <HAL_RCC_OscConfig+0x3ee>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ff2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x350>
 800200a:	4bbc      	ldr	r3, [pc, #752]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e013      	b.n	8002038 <HAL_RCC_OscConfig+0x378>
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002028:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002034:	4bb1      	ldr	r3, [pc, #708]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800203e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800204a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_RCC_OscConfig+0x3ba>
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d002      	beq.n	800207a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f000 bd31 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4ba0      	ldr	r3, [pc, #640]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	21f8      	movs	r1, #248	; 0xf8
 800208a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002092:	fa91 f1a1 	rbit	r1, r1
 8002096:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800209a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800209e:	fab1 f181 	clz	r1, r1
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	408b      	lsls	r3, r1
 80020a6:	4995      	ldr	r1, [pc, #596]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	e0f5      	b.n	800229a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8085 	beq.w	80021c4 <HAL_RCC_OscConfig+0x504>
 80020ba:	2301      	movs	r3, #1
 80020bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80020cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2301      	movs	r3, #1
 80020e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe fbfd 	bl	80008e4 <HAL_GetTick>
 80020ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe fbf8 	bl	80008e4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d902      	bls.n	8002106 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	f000 bceb 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
 8002106:	2302      	movs	r3, #2
 8002108:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002118:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0x476>
 8002130:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e013      	b.n	800215e <HAL_RCC_OscConfig+0x49e>
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800214e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800215a:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2202      	movs	r2, #2
 8002160:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002164:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002168:	fa92 f2a2 	rbit	r2, r2
 800216c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002170:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0af      	beq.n	80020f0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	21f8      	movs	r1, #248	; 0xf8
 80021a0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80021a8:	fa91 f1a1 	rbit	r1, r1
 80021ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80021b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021b4:	fab1 f181 	clz	r1, r1
 80021b8:	b2c9      	uxtb	r1, r1
 80021ba:	408b      	lsls	r3, r1
 80021bc:	494f      	ldr	r1, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
 80021c2:	e06a      	b.n	800229a <HAL_RCC_OscConfig+0x5da>
 80021c4:	2301      	movs	r3, #1
 80021c6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80021d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe fb78 	bl	80008e4 <HAL_GetTick>
 80021f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe fb73 	bl	80008e4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d902      	bls.n	8002210 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	f000 bc66 	b.w	8002adc <HAL_RCC_OscConfig+0xe1c>
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002222:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0x580>
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x5a8>
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002258:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_OscConfig+0x63c>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2202      	movs	r2, #2
 800226a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800226e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800227a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0220 	orr.w	r2, r2, #32
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1af      	bne.n	80021fa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80da 	beq.w	800245e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d069      	beq.n	8002388 <HAL_RCC_OscConfig+0x6c8>
 80022b4:	2301      	movs	r3, #1
 80022b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80022c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x640>)
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fb01 	bl	80008e4 <HAL_GetTick>
 80022e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e00d      	b.n	8002304 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fafc 	bl	80008e4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d905      	bls.n	8002304 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e3ef      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 80022fc:	40021000 	.word	0x40021000
 8002300:	10908120 	.word	0x10908120
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002334:	2202      	movs	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002348:	4ba4      	ldr	r3, [pc, #656]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800234a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002350:	2102      	movs	r1, #2
 8002352:	6019      	str	r1, [r3, #0]
 8002354:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f1a3 	rbit	r1, r3
 800235e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002362:	6019      	str	r1, [r3, #0]
  return result;
 8002364:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0b0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x628>
 8002386:	e06a      	b.n	800245e <HAL_RCC_OscConfig+0x79e>
 8002388:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	fa93 f2a3 	rbit	r2, r3
 800239a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800239e:	601a      	str	r2, [r3, #0]
  return result;
 80023a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <HAL_RCC_OscConfig+0x920>)
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	461a      	mov	r2, r3
 80023b6:	2300      	movs	r3, #0
 80023b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe fa93 	bl	80008e4 <HAL_GetTick>
 80023be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c2:	e009      	b.n	80023d8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe fa8e 	bl	80008e4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e381      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 80023d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800241e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002424:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002428:	2102      	movs	r1, #2
 800242a:	6019      	str	r1, [r3, #0]
 800242c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f1a3 	rbit	r1, r3
 8002436:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800243a:	6019      	str	r1, [r3, #0]
  return result;
 800243c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2101      	movs	r1, #1
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1b2      	bne.n	80023c4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8157 	beq.w	800271c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4a55      	ldr	r2, [pc, #340]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	61d3      	str	r3, [r2, #28]
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_OscConfig+0x924>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b2:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCC_OscConfig+0x924>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4b      	ldr	r2, [pc, #300]	; (80025e4 <HAL_RCC_OscConfig+0x924>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe fa11 	bl	80008e4 <HAL_GetTick>
 80024c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	e009      	b.n	80024dc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe fa0c 	bl	80008e4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e2ff      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x924>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_OscConfig+0x840>
 80024f2:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	e02f      	b.n	8002560 <HAL_RCC_OscConfig+0x8a0>
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x864>
 800250a:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a33      	ldr	r2, [pc, #204]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a30      	ldr	r2, [pc, #192]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0x8a0>
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x888>
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x8a0>
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06a      	beq.n	8002640 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe f9bb 	bl	80008e4 <HAL_GetTick>
 800256e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe f9b6 	bl	80008e4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e2a7      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 800258c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025a8:	2202      	movs	r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025ba:	601a      	str	r2, [r3, #0]
  return result;
 80025bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x928>
 80025d6:	4b01      	ldr	r3, [pc, #4]	; (80025dc <HAL_RCC_OscConfig+0x91c>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	e013      	b.n	8002604 <HAL_RCC_OscConfig+0x944>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	10908120 	.word	0x10908120
 80025e4:	40007000 	.word	0x40007000
 80025e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	fa93 f2a3 	rbit	r2, r3
 80025fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	4bc0      	ldr	r3, [pc, #768]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002608:	2102      	movs	r1, #2
 800260a:	6011      	str	r1, [r2, #0]
 800260c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	fa92 f1a2 	rbit	r1, r2
 8002616:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800261a:	6011      	str	r1, [r2, #0]
  return result;
 800261c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	fab2 f282 	clz	r2, r2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	f002 021f 	and.w	r2, r2, #31
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f202 	lsl.w	r2, r1, r2
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d09a      	beq.n	8002574 <HAL_RCC_OscConfig+0x8b4>
 800263e:	e063      	b.n	8002708 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe f950 	bl	80008e4 <HAL_GetTick>
 8002644:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe f94b 	bl	80008e4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e23c      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 8002662:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002666:	2202      	movs	r2, #2
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800267e:	2202      	movs	r2, #2
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002696:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x9f2>
 80026ac:	4b95      	ldr	r3, [pc, #596]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	e00d      	b.n	80026ce <HAL_RCC_OscConfig+0xa0e>
 80026b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026d2:	2102      	movs	r1, #2
 80026d4:	6011      	str	r1, [r2, #0]
 80026d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	fa92 f1a2 	rbit	r1, r2
 80026e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026e4:	6011      	str	r1, [r2, #0]
  return result;
 80026e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f002 021f 	and.w	r2, r2, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1a0      	bne.n	800264a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002708:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	4a7b      	ldr	r2, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 81d9 	beq.w	8002ada <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	f000 81a6 	beq.w	8002a82 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b02      	cmp	r3, #2
 800273e:	f040 811e 	bne.w	800297e <HAL_RCC_OscConfig+0xcbe>
 8002742:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800275a:	601a      	str	r2, [r3, #0]
  return result;
 800275c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002760:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800276c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe f8b4 	bl	80008e4 <HAL_GetTick>
 800277c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002780:	e009      	b.n	8002796 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe f8af 	bl	80008e4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1a2      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 8002796:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800279a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0xb10>
 80027ca:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e01b      	b.n	8002808 <HAL_RCC_OscConfig+0xb48>
 80027d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f2a3 	rbit	r2, r3
 80027fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800280c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002820:	6011      	str	r1, [r2, #0]
  return result;
 8002822:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d19e      	bne.n	8002782 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f023 020f 	bic.w	r2, r3, #15
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	492c      	ldr	r1, [pc, #176]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002854:	4313      	orrs	r3, r2
 8002856:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a19      	ldr	r1, [r3, #32]
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	430b      	orrs	r3, r1
 800286e:	4925      	ldr	r1, [pc, #148]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800287c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800288c:	601a      	str	r2, [r3, #0]
  return result;
 800288e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002892:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800289e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe f81b 	bl	80008e4 <HAL_GetTick>
 80028ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b2:	e009      	b.n	80028c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe f816 	bl	80008e4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e109      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 80028c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028e0:	601a      	str	r2, [r3, #0]
  return result;
 80028e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0xc48>
 80028fc:	4b01      	ldr	r3, [pc, #4]	; (8002904 <HAL_RCC_OscConfig+0xc44>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	e01e      	b.n	8002940 <HAL_RCC_OscConfig+0xc80>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0xe28>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002948:	6011      	str	r1, [r2, #0]
 800294a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fa92 f1a2 	rbit	r1, r2
 8002954:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002958:	6011      	str	r1, [r2, #0]
  return result;
 800295a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d09b      	beq.n	80028b4 <HAL_RCC_OscConfig+0xbf4>
 800297c:	e0ad      	b.n	8002ada <HAL_RCC_OscConfig+0xe1a>
 800297e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002996:	601a      	str	r2, [r3, #0]
  return result;
 8002998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800299c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fd ff96 	bl	80008e4 <HAL_GetTick>
 80029b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fd ff91 	bl	80008e4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e084      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
 80029d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ea:	601a      	str	r2, [r3, #0]
  return result;
 80029ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0xd4c>
 8002a06:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0xe28>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0xd84>
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 0320 	add.w	r3, r7, #32
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f107 0318 	add.w	r3, r7, #24
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_RCC_OscConfig+0xe28>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f107 0214 	add.w	r2, r7, #20
 8002a48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a4c:	6011      	str	r1, [r2, #0]
 8002a4e:	f107 0214 	add.w	r2, r7, #20
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	fa92 f1a2 	rbit	r1, r2
 8002a58:	f107 0210 	add.w	r2, r7, #16
 8002a5c:	6011      	str	r1, [r2, #0]
  return result;
 8002a5e:	f107 0210 	add.w	r2, r7, #16
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d19e      	bne.n	80029be <HAL_RCC_OscConfig+0xcfe>
 8002a80:	e02b      	b.n	8002ada <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e025      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0xe28>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_OscConfig+0xe28>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002aa4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d111      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ab2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d108      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b09e      	sub	sp, #120	; 0x78
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e162      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b90      	ldr	r3, [pc, #576]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d910      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0207 	bic.w	r2, r3, #7
 8002b1a:	498b      	ldr	r1, [pc, #556]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e14a      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b82      	ldr	r3, [pc, #520]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	497f      	ldr	r1, [pc, #508]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80dc 	beq.w	8002d18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13c      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xf6>
 8002b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xa6>
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e00f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xc6>
 8002b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bae:	4b67      	ldr	r3, [pc, #412]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bba:	fa92 f2a2 	rbit	r2, r2
 8002bbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bc2:	fab2 f282 	clz	r2, r2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f042 0220 	orr.w	r2, r2, #32
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f002 021f 	and.w	r2, r2, #31
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d17b      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0f3      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d13c      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x178>
 8002bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d102      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x128>
 8002c0e:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	e00f      	b.n	8002c34 <HAL_RCC_ClockConfig+0x148>
 8002c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
 8002c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40
 8002c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c38:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f042 0220 	orr.w	r2, r2, #32
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f002 021f 	and.w	r2, r2, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d13a      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b2      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
 8002c64:	2302      	movs	r3, #2
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x1a0>
 8002c86:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e00d      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1bc>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	2202      	movs	r2, #2
 8002caa:	61ba      	str	r2, [r7, #24]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	fa92 f2a2 	rbit	r2, r2
 8002cb2:	617a      	str	r2, [r7, #20]
  return result;
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	fab2 f282 	clz	r2, r2
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f042 0220 	orr.w	r2, r2, #32
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	f002 021f 	and.w	r2, r2, #31
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e079      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	491a      	ldr	r1, [pc, #104]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fd fdfc 	bl	80008e4 <HAL_GetTick>
 8002cec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fd fdf8 	bl	80008e4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e061      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_ClockConfig+0x260>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d214      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4906      	ldr	r1, [pc, #24]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e040      	b.n	8002dca <HAL_RCC_ClockConfig+0x2de>
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4912      	ldr	r1, [pc, #72]	; (8002dd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d8e:	f000 f829 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4601      	mov	r1, r0
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9c:	22f0      	movs	r2, #240	; 0xf0
 8002d9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	fa92 f2a2 	rbit	r2, r2
 8002da6:	60fa      	str	r2, [r7, #12]
  return result;
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	40d3      	lsrs	r3, r2
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x2ec>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_RCC_ClockConfig+0x2f0>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_ClockConfig+0x2f4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fcb2 	bl	800072c <HAL_InitTick>
  
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3778      	adds	r7, #120	; 0x78
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800643c 	.word	0x0800643c
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b08b      	sub	sp, #44	; 0x2c
 8002de8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x30>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x36>
 8002e12:	e03f      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e16:	623b      	str	r3, [r7, #32]
      break;
 8002e18:	e03f      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e24:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	fa92 f2a2 	rbit	r2, r2
 8002e2c:	607a      	str	r2, [r7, #4]
  return result;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	fab2 f282 	clz	r2, r2
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	40d3      	lsrs	r3, r2
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	220f      	movs	r2, #15
 8002e48:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	fa92 f2a2 	rbit	r2, r2
 8002e50:	60fa      	str	r2, [r7, #12]
  return result;
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	40d3      	lsrs	r3, r2
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	e007      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	623b      	str	r3, [r7, #32]
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e96:	623b      	str	r3, [r7, #32]
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	372c      	adds	r7, #44	; 0x2c
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	007a1200 	.word	0x007a1200
 8002eb0:	08006454 	.word	0x08006454
 8002eb4:	08006464 	.word	0x08006464

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ed6:	f7ff ffef 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002eda:	4601      	mov	r1, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ee4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ee8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	fa92 f2a2 	rbit	r2, r2
 8002ef0:	603a      	str	r2, [r7, #0]
  return result;
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	40d3      	lsrs	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	0800644c 	.word	0x0800644c

08002f14 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	220f      	movs	r2, #15
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCC_GetClockConfig+0x60>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0207 	and.w	r2, r3, #7
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40022000 	.word	0x40022000

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b092      	sub	sp, #72	; 0x48
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80d4 	beq.w	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b45      	ldr	r3, [pc, #276]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a41      	ldr	r2, [pc, #260]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fd fc81 	bl	80008e4 <HAL_GetTick>
 8002fe2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7fd fc7d 	bl	80008e4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b64      	cmp	r3, #100	; 0x64
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1d6      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8084 	beq.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003020:	429a      	cmp	r2, r3
 8003022:	d07c      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	461a      	mov	r2, r3
 800304e:	2301      	movs	r3, #1
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	461a      	mov	r2, r3
 8003072:	2300      	movs	r3, #0
 8003074:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04b      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fd fc2d 	bl	80008e4 <HAL_GetTick>
 800308a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd fc29 	bl	80008e4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e180      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80030a4:	2302      	movs	r3, #2
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	2302      	movs	r3, #2
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	61fb      	str	r3, [r7, #28]
  return result;
 80030bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d108      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030d2:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	e00d      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
 80030e0:	10908100 	.word	0x10908100
 80030e4:	2302      	movs	r3, #2
 80030e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	4ba0      	ldr	r3, [pc, #640]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2202      	movs	r2, #2
 80030f6:	613a      	str	r2, [r7, #16]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	fa92 f2a2 	rbit	r2, r2
 80030fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f002 021f 	and.w	r2, r2, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0b7      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800311e:	4b95      	ldr	r3, [pc, #596]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4992      	ldr	r1, [pc, #584]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b8e      	ldr	r3, [pc, #568]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a8d      	ldr	r2, [pc, #564]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003150:	4b88      	ldr	r3, [pc, #544]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f023 0203 	bic.w	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4985      	ldr	r1, [pc, #532]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	497e      	ldr	r1, [pc, #504]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4976      	ldr	r1, [pc, #472]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f023 0210 	bic.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	496f      	ldr	r1, [pc, #444]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	4967      	ldr	r1, [pc, #412]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031e6:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f023 0220 	bic.w	r2, r3, #32
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4960      	ldr	r1, [pc, #384]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	4958      	ldr	r1, [pc, #352]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4951      	ldr	r1, [pc, #324]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4949      	ldr	r1, [pc, #292]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800325e:	4b45      	ldr	r3, [pc, #276]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4942      	ldr	r1, [pc, #264]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	493a      	ldr	r1, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4933      	ldr	r1, [pc, #204]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	492b      	ldr	r1, [pc, #172]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	491c      	ldr	r1, [pc, #112]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	490d      	ldr	r1, [pc, #52]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	4906      	ldr	r1, [pc, #24]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800336c:	4b01      	ldr	r3, [pc, #4]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	e002      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	490b      	ldr	r1, [pc, #44]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003382:	4313      	orrs	r3, r2
 8003384:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3748      	adds	r7, #72	; 0x48
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e049      	b.n	800345a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f841 	bl	8003462 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 f9f8 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04f      	b.n	8003530 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d018      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <HAL_TIM_Base_Start_IT+0xc8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_TIM_Base_Start_IT+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIM_Base_Start_IT+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIM_Base_Start_IT+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIM_Base_Start_IT+0x76>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d115      	bne.n	800351a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_TIM_Base_Start_IT+0xdc>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b06      	cmp	r3, #6
 80034fe:	d015      	beq.n	800352c <HAL_TIM_Base_Start_IT+0xb4>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d011      	beq.n	800352c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	e008      	b.n	800352c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e000      	b.n	800352e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000
 8003550:	40015000 	.word	0x40015000
 8003554:	00010007 	.word	0x00010007

08003558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0202 	mvn.w	r2, #2
 8003584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f905 	bl	80037aa <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8f7 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f908 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0204 	mvn.w	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8db 	bl	80037aa <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8cd 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8de 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b08      	cmp	r3, #8
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0208 	mvn.w	r2, #8
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8b1 	bl	80037aa <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8a3 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8b4 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0210 	mvn.w	r2, #16
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2208      	movs	r2, #8
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f887 	bl	80037aa <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f879 	bl	8003796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f88a 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0201 	mvn.w	r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fc ffea 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f918 	bl	8003938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003716:	d10e      	bne.n	8003736 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d107      	bne.n	8003736 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800372e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f90b 	bl	800394c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d10e      	bne.n	8003762 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d107      	bne.n	8003762 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800375a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f838 	bl	80037d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d10e      	bne.n	800378e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d107      	bne.n	800378e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f06f 0220 	mvn.w	r2, #32
 8003786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8cb 	bl	8003924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a42      	ldr	r2, [pc, #264]	; (8003904 <TIM_Base_SetConfig+0x11c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d013      	beq.n	8003828 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d00f      	beq.n	8003828 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <TIM_Base_SetConfig+0x120>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00b      	beq.n	8003828 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3e      	ldr	r2, [pc, #248]	; (800390c <TIM_Base_SetConfig+0x124>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <TIM_Base_SetConfig+0x128>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d108      	bne.n	800383a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a31      	ldr	r2, [pc, #196]	; (8003904 <TIM_Base_SetConfig+0x11c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01f      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d01b      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2e      	ldr	r2, [pc, #184]	; (8003908 <TIM_Base_SetConfig+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d017      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2d      	ldr	r2, [pc, #180]	; (800390c <TIM_Base_SetConfig+0x124>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <TIM_Base_SetConfig+0x128>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <TIM_Base_SetConfig+0x130>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <TIM_Base_SetConfig+0x134>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <TIM_Base_SetConfig+0x138>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_Base_SetConfig+0x9a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <TIM_Base_SetConfig+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_Base_SetConfig+0x100>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <TIM_Base_SetConfig+0x128>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0x100>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x100>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <TIM_Base_SetConfig+0x134>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x100>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a11      	ldr	r2, [pc, #68]	; (8003920 <TIM_Base_SetConfig+0x138>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x100>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40013400 	.word	0x40013400
 8003914:	40015000 	.word	0x40015000
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800

08003924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003966:	f3ef 8305 	mrs	r3, IPSR
 800396a:	60bb      	str	r3, [r7, #8]
  return(result);
 800396c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003972:	f3ef 8310 	mrs	r3, PRIMASK
 8003976:	607b      	str	r3, [r7, #4]
  return(result);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <osKernelInitialize+0x32>
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <osKernelInitialize+0x64>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d109      	bne.n	800399a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003986:	f3ef 8311 	mrs	r3, BASEPRI
 800398a:	603b      	str	r3, [r7, #0]
  return(result);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003992:	f06f 0305 	mvn.w	r3, #5
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e00c      	b.n	80039b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <osKernelInitialize+0x64>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <osKernelInitialize+0x64>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e002      	b.n	80039b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80039b4:	68fb      	ldr	r3, [r7, #12]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000002c 	.word	0x2000002c

080039c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ce:	f3ef 8305 	mrs	r3, IPSR
 80039d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80039d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	607b      	str	r3, [r7, #4]
  return(result);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <osKernelStart+0x32>
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <osKernelStart+0x64>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d109      	bne.n	8003a02 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039ee:	f3ef 8311 	mrs	r3, BASEPRI
 80039f2:	603b      	str	r3, [r7, #0]
  return(result);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <osKernelStart+0x3a>
    stat = osErrorISR;
 80039fa:	f06f 0305 	mvn.w	r3, #5
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e00e      	b.n	8003a20 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <osKernelStart+0x64>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <osKernelStart+0x64>)
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a10:	f001 f86a 	bl	8004ae8 <vTaskStartScheduler>
      stat = osOK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000002c 	.word	0x2000002c

08003a30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b092      	sub	sp, #72	; 0x48
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a40:	f3ef 8305 	mrs	r3, IPSR
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f040 8094 	bne.w	8003b76 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a52:	623b      	str	r3, [r7, #32]
  return(result);
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 808d 	bne.w	8003b76 <osThreadNew+0x146>
 8003a5c:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <osThreadNew+0x150>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d106      	bne.n	8003a72 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a64:	f3ef 8311 	mrs	r3, BASEPRI
 8003a68:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 8082 	bne.w	8003b76 <osThreadNew+0x146>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d07e      	beq.n	8003b76 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003a7c:	2318      	movs	r3, #24
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003a80:	2300      	movs	r3, #0
 8003a82:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003a84:	f107 031b 	add.w	r3, r7, #27
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d045      	beq.n	8003b22 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <osThreadNew+0x74>
        name = attr->name;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <osThreadNew+0x9a>
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	2b38      	cmp	r3, #56	; 0x38
 8003abc:	d805      	bhi.n	8003aca <osThreadNew+0x9a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <osThreadNew+0x9e>
        return (NULL);
 8003aca:	2300      	movs	r3, #0
 8003acc:	e054      	b.n	8003b78 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00e      	beq.n	8003b04 <osThreadNew+0xd4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b5b      	cmp	r3, #91	; 0x5b
 8003aec:	d90a      	bls.n	8003b04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <osThreadNew+0xd4>
        mem = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b02:	e010      	b.n	8003b26 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10c      	bne.n	8003b26 <osThreadNew+0xf6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <osThreadNew+0xf6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <osThreadNew+0xf6>
          mem = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b20:	e001      	b.n	8003b26 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d110      	bne.n	8003b4e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b34:	9202      	str	r2, [sp, #8]
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fe08 	bl	8004758 <xTaskCreateStatic>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e013      	b.n	8003b76 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fe4f 	bl	800480a <xTaskCreate>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <osThreadNew+0x146>
          hTask = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b76:	697b      	ldr	r3, [r7, #20]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3738      	adds	r7, #56	; 0x38
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2000002c 	.word	0x2000002c

08003b84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b8c:	f3ef 8305 	mrs	r3, IPSR
 8003b90:	613b      	str	r3, [r7, #16]
  return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b98:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <osDelay+0x34>
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <osDelay+0x58>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d109      	bne.n	8003bc0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bac:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <osDelay+0x3c>
    stat = osErrorISR;
 8003bb8:	f06f 0305 	mvn.w	r3, #5
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e007      	b.n	8003bd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 ff58 	bl	8004a80 <vTaskDelay>
    }
  }

  return (stat);
 8003bd0:	697b      	ldr	r3, [r7, #20]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000002c 	.word	0x2000002c

08003be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8003bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <vApplicationGetIdleTaskMemory+0x30>)
 8003bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000030 	.word	0x20000030
 8003c10:	2000008c 	.word	0x2000008c

08003c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <vApplicationGetTimerTaskMemory+0x30>)
 8003c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	2000028c 	.word	0x2000028c
 8003c44:	200002e8 	.word	0x200002e8

08003c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f103 0208 	add.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f103 0208 	add.w	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f103 0208 	add.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d00:	d103      	bne.n	8003d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e00c      	b.n	8003d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e002      	b.n	8003d18 <vListInsert+0x2e>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d2f6      	bcs.n	8003d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6852      	ldr	r2, [r2, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d103      	bne.n	8003d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003dd8:	f001 ffd8 	bl	8005d8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d114      	bne.n	8003e58 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3310      	adds	r3, #16
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f8da 	bl	8004ff4 <xTaskRemoveFromEventList>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d012      	beq.n	8003e6c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <xQueueGenericReset+0xcc>)
 8003e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	e009      	b.n	8003e6c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fef3 	bl	8003c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3324      	adds	r3, #36	; 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff feee 	bl	8003c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e6c:	f001 ffbc 	bl	8005de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e70:	2301      	movs	r3, #1
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	e000ed04 	.word	0xe000ed04

08003e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	; 0x38
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <xQueueGenericCreateStatic+0x28>
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea6:	e7fe      	b.n	8003ea6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <xQueueGenericCreateStatic+0x42>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <xQueueGenericCreateStatic+0x4e>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <xQueueGenericCreateStatic+0x52>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xQueueGenericCreateStatic+0x54>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <xQueueGenericCreateStatic+0x6c>
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	e7fe      	b.n	8003eea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <xQueueGenericCreateStatic+0x78>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <xQueueGenericCreateStatic+0x7c>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <xQueueGenericCreateStatic+0x7e>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <xQueueGenericCreateStatic+0x96>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f16:	2350      	movs	r3, #80	; 0x50
 8003f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d009      	beq.n	8003f34 <xQueueGenericCreateStatic+0xb4>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f805 	bl	8003f64 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	; 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e002      	b.n	8003f86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f92:	2101      	movs	r1, #1
 8003f94:	69b8      	ldr	r0, [r7, #24]
 8003f96:	f7ff ff0b 	bl	8003db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	; 0x38
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <xQueueGenericSend+0x30>
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	e7fe      	b.n	8003fda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <xQueueGenericSend+0x3e>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <xQueueGenericSend+0x42>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueGenericSend+0x44>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <xQueueGenericSend+0x5c>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e7fe      	b.n	8004006 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x6a>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <xQueueGenericSend+0x6e>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericSend+0x70>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <xQueueGenericSend+0x88>
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	e7fe      	b.n	8004032 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004034:	f001 f99a 	bl	800536c <xTaskGetSchedulerState>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <xQueueGenericSend+0x98>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <xQueueGenericSend+0x9c>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <xQueueGenericSend+0x9e>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <xQueueGenericSend+0xb6>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e7fe      	b.n	8004060 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004062:	f001 fe93 	bl	8005d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <xQueueGenericSend+0xcc>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d129      	bne.n	80040cc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407e:	f000 f9ff 	bl	8004480 <prvCopyDataToQueue>
 8004082:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	4618      	mov	r0, r3
 8004092:	f000 ffaf 	bl	8004ff4 <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800409c:	4b3f      	ldr	r3, [pc, #252]	; (800419c <xQueueGenericSend+0x1f0>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	e00a      	b.n	80040c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <xQueueGenericSend+0x1f0>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040c4:	f001 fe90 	bl	8005de8 <vPortExitCritical>
				return pdPASS;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e063      	b.n	8004194 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040d2:	f001 fe89 	bl	8005de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e05c      	b.n	8004194 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ffe7 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040ee:	f001 fe7b 	bl	8005de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040f2:	f000 fd5d 	bl	8004bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040f6:	f001 fe49 	bl	8005d8c <vPortEnterCritical>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004106:	d103      	bne.n	8004110 <xQueueGenericSend+0x164>
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411c:	d103      	bne.n	8004126 <xQueueGenericSend+0x17a>
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004126:	f001 fe5f 	bl	8005de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800412a:	1d3a      	adds	r2, r7, #4
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 ffd6 	bl	80050e4 <xTaskCheckForTimeOut>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d124      	bne.n	8004188 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800413e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004140:	f000 fa96 	bl	8004670 <prvIsQueueFull>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d018      	beq.n	800417c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	3310      	adds	r3, #16
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f000 ff00 	bl	8004f58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415a:	f000 fa21 	bl	80045a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800415e:	f000 fd35 	bl	8004bcc <xTaskResumeAll>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f af7c 	bne.w	8004062 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <xQueueGenericSend+0x1f0>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	e772      	b.n	8004062 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800417c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417e:	f000 fa0f 	bl	80045a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004182:	f000 fd23 	bl	8004bcc <xTaskResumeAll>
 8004186:	e76c      	b.n	8004062 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800418a:	f000 fa09 	bl	80045a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800418e:	f000 fd1d 	bl	8004bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004192:	2300      	movs	r3, #0
		}
	}
}
 8004194:	4618      	mov	r0, r3
 8004196:	3738      	adds	r7, #56	; 0x38
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <xQueueGenericSendFromISR+0x2c>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e7fe      	b.n	80041ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <xQueueGenericSendFromISR+0x3a>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <xQueueGenericSendFromISR+0x3e>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <xQueueGenericSendFromISR+0x40>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <xQueueGenericSendFromISR+0x58>
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	623b      	str	r3, [r7, #32]
 80041f6:	e7fe      	b.n	80041f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d103      	bne.n	8004206 <xQueueGenericSendFromISR+0x66>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <xQueueGenericSendFromISR+0x6a>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <xQueueGenericSendFromISR+0x6c>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <xQueueGenericSendFromISR+0x84>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e7fe      	b.n	8004222 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004224:	f001 fe8e 	bl	8005f44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004228:	f3ef 8211 	mrs	r2, BASEPRI
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	61ba      	str	r2, [r7, #24]
 800423e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004240:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <xQueueGenericSendFromISR+0xb6>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d12c      	bne.n	80042b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004266:	f000 f90b 	bl	8004480 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800426a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004272:	d112      	bne.n	800429a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d016      	beq.n	80042aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	4618      	mov	r0, r3
 8004282:	f000 feb7 	bl	8004ff4 <xTaskRemoveFromEventList>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e007      	b.n	80042aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800429a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800429e:	3301      	adds	r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	b25a      	sxtb	r2, r3
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042aa:	2301      	movs	r3, #1
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042ae:	e001      	b.n	80042b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3738      	adds	r7, #56	; 0x38
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <xQueueReceive+0x2e>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	e7fe      	b.n	80042f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <xQueueReceive+0x3c>
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <xQueueReceive+0x40>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <xQueueReceive+0x42>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <xQueueReceive+0x5a>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e7fe      	b.n	8004320 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004322:	f001 f823 	bl	800536c <xTaskGetSchedulerState>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <xQueueReceive+0x6a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xQueueReceive+0x6e>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueReceive+0x70>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <xQueueReceive+0x88>
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e7fe      	b.n	800434e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004350:	f001 fd1c 	bl	8005d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01f      	beq.n	80043a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004364:	f000 f8f6 	bl	8004554 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00f      	beq.n	8004398 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	3310      	adds	r3, #16
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fe39 	bl	8004ff4 <xTaskRemoveFromEventList>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004388:	4b3c      	ldr	r3, [pc, #240]	; (800447c <xQueueReceive+0x1b4>)
 800438a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004398:	f001 fd26 	bl	8005de8 <vPortExitCritical>
				return pdPASS;
 800439c:	2301      	movs	r3, #1
 800439e:	e069      	b.n	8004474 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043a6:	f001 fd1f 	bl	8005de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043aa:	2300      	movs	r3, #0
 80043ac:	e062      	b.n	8004474 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b4:	f107 0310 	add.w	r3, r7, #16
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fe7d 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043be:	2301      	movs	r3, #1
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043c2:	f001 fd11 	bl	8005de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043c6:	f000 fbf3 	bl	8004bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ca:	f001 fcdf 	bl	8005d8c <vPortEnterCritical>
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043da:	d103      	bne.n	80043e4 <xQueueReceive+0x11c>
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f0:	d103      	bne.n	80043fa <xQueueReceive+0x132>
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043fa:	f001 fcf5 	bl	8005de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fe:	1d3a      	adds	r2, r7, #4
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fe6c 	bl	80050e4 <xTaskCheckForTimeOut>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d123      	bne.n	800445a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004414:	f000 f916 	bl	8004644 <prvIsQueueEmpty>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	3324      	adds	r3, #36	; 0x24
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fd96 	bl	8004f58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800442c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442e:	f000 f8b7 	bl	80045a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004432:	f000 fbcb 	bl	8004bcc <xTaskResumeAll>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d189      	bne.n	8004350 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <xQueueReceive+0x1b4>)
 800443e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	e780      	b.n	8004350 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800444e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004450:	f000 f8a6 	bl	80045a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004454:	f000 fbba 	bl	8004bcc <xTaskResumeAll>
 8004458:	e77a      	b.n	8004350 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800445a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800445c:	f000 f8a0 	bl	80045a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004460:	f000 fbb4 	bl	8004bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004466:	f000 f8ed 	bl	8004644 <prvIsQueueEmpty>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	f43f af6f 	beq.w	8004350 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004472:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004474:	4618      	mov	r0, r3
 8004476:	3730      	adds	r7, #48	; 0x30
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	e000ed04 	.word	0xe000ed04

08004480 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d14d      	bne.n	8004542 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ff7c 	bl	80053a8 <xTaskPriorityDisinherit>
 80044b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	e043      	b.n	8004542 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d119      	bne.n	80044f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6898      	ldr	r0, [r3, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	461a      	mov	r2, r3
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	f001 ff72 	bl	80063b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d32b      	bcc.n	8004542 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	e026      	b.n	8004542 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68d8      	ldr	r0, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	461a      	mov	r2, r3
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	f001 ff58 	bl	80063b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	425b      	negs	r3, r3
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d207      	bcs.n	8004530 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	425b      	negs	r3, r3
 800452a:	441a      	add	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d105      	bne.n	8004542 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3b01      	subs	r3, #1
 8004540:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800454a:	697b      	ldr	r3, [r7, #20]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	441a      	add	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d303      	bcc.n	8004588 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68d9      	ldr	r1, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	461a      	mov	r2, r3
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f001 ff0e 	bl	80063b4 <memcpy>
	}
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045a8:	f001 fbf0 	bl	8005d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045b4:	e011      	b.n	80045da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd16 	bl	8004ff4 <xTaskRemoveFromEventList>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045ce:	f000 fde9 	bl	80051a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dce9      	bgt.n	80045b6 <prvUnlockQueue+0x16>
 80045e2:	e000      	b.n	80045e6 <prvUnlockQueue+0x46>
					break;
 80045e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045ee:	f001 fbfb 	bl	8005de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045f2:	f001 fbcb 	bl	8005d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045fe:	e011      	b.n	8004624 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3310      	adds	r3, #16
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fcf1 	bl	8004ff4 <xTaskRemoveFromEventList>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004618:	f000 fdc4 	bl	80051a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800461c:	7bbb      	ldrb	r3, [r7, #14]
 800461e:	3b01      	subs	r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004628:	2b00      	cmp	r3, #0
 800462a:	dce9      	bgt.n	8004600 <prvUnlockQueue+0x60>
 800462c:	e000      	b.n	8004630 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800462e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	22ff      	movs	r2, #255	; 0xff
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004638:	f001 fbd6 	bl	8005de8 <vPortExitCritical>
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800464c:	f001 fb9e 	bl	8005d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e001      	b.n	8004662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004662:	f001 fbc1 	bl	8005de8 <vPortExitCritical>

	return xReturn;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004678:	f001 fb88 	bl	8005d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	429a      	cmp	r2, r3
 8004686:	d102      	bne.n	800468e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e001      	b.n	8004692 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004692:	f001 fba9 	bl	8005de8 <vPortExitCritical>

	return xReturn;
 8004696:	68fb      	ldr	r3, [r7, #12]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	e014      	b.n	80046da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046b0:	4a0e      	ldr	r2, [pc, #56]	; (80046ec <vQueueAddToRegistry+0x4c>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046bc:	490b      	ldr	r1, [pc, #44]	; (80046ec <vQueueAddToRegistry+0x4c>)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <vQueueAddToRegistry+0x4c>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046d2:	e005      	b.n	80046e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b07      	cmp	r3, #7
 80046de:	d9e7      	bls.n	80046b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20001a24 	.word	0x20001a24

080046f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004700:	f001 fb44 	bl	8005d8c <vPortEnterCritical>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470a:	b25b      	sxtb	r3, r3
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004710:	d103      	bne.n	800471a <vQueueWaitForMessageRestricted+0x2a>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004720:	b25b      	sxtb	r3, r3
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004726:	d103      	bne.n	8004730 <vQueueWaitForMessageRestricted+0x40>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004730:	f001 fb5a 	bl	8005de8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	3324      	adds	r3, #36	; 0x24
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fc2b 	bl	8004fa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800474a:	6978      	ldr	r0, [r7, #20]
 800474c:	f7ff ff28 	bl	80045a0 <prvUnlockQueue>
	}
 8004750:	bf00      	nop
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08e      	sub	sp, #56	; 0x38
 800475c:	af04      	add	r7, sp, #16
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <xTaskCreateStatic+0x28>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	e7fe      	b.n	800477e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <xTaskCreateStatic+0x42>
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e7fe      	b.n	8004798 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800479a:	235c      	movs	r3, #92	; 0x5c
 800479c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b5c      	cmp	r3, #92	; 0x5c
 80047a2:	d009      	beq.n	80047b8 <xTaskCreateStatic+0x60>
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e7fe      	b.n	80047b6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01e      	beq.n	80047fc <xTaskCreateStatic+0xa4>
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047d6:	2300      	movs	r3, #0
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	9302      	str	r3, [sp, #8]
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f850 	bl	8004894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f6:	f000 f8d3 	bl	80049a0 <prvAddNewTaskToReadyList>
 80047fa:	e001      	b.n	8004800 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
	}
 8004802:	4618      	mov	r0, r3
 8004804:	3728      	adds	r7, #40	; 0x28
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800480a:	b580      	push	{r7, lr}
 800480c:	b08c      	sub	sp, #48	; 0x30
 800480e:	af04      	add	r7, sp, #16
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fbce 	bl	8005fc0 <pvPortMalloc>
 8004824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800482c:	205c      	movs	r0, #92	; 0x5c
 800482e:	f001 fbc7 	bl	8005fc0 <pvPortMalloc>
 8004832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
 8004840:	e005      	b.n	800484e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f001 fc7e 	bl	8006144 <vPortFree>
 8004848:	e001      	b.n	800484e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	2300      	movs	r3, #0
 8004860:	9303      	str	r3, [sp, #12]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	9302      	str	r3, [sp, #8]
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f80e 	bl	8004894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004878:	69f8      	ldr	r0, [r7, #28]
 800487a:	f000 f891 	bl	80049a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800487e:	2301      	movs	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	e002      	b.n	800488a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800488a:	69bb      	ldr	r3, [r7, #24]
	}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	461a      	mov	r2, r3
 80048ac:	21a5      	movs	r1, #165	; 0xa5
 80048ae:	f001 fd8c 	bl	80063ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048bc:	3b01      	subs	r3, #1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <prvInitialiseNewTask+0x56>
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e7fe      	b.n	80048e8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e012      	b.n	8004916 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	7819      	ldrb	r1, [r3, #0]
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	3334      	adds	r3, #52	; 0x34
 8004900:	460a      	mov	r2, r1
 8004902:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3301      	adds	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d9e9      	bls.n	80048f0 <prvInitialiseNewTask+0x5c>
 800491c:	e000      	b.n	8004920 <prvInitialiseNewTask+0x8c>
		{
			break;
 800491e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b37      	cmp	r3, #55	; 0x37
 800492c:	d901      	bls.n	8004932 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800492e:	2337      	movs	r3, #55	; 0x37
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2200      	movs	r2, #0
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff f99d 	bl	8003c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f998 	bl	8003c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f001 f8db 	bl	8005b3c <pxPortInitialiseStack>
 8004986:	4602      	mov	r2, r0
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a8:	f001 f9f0 	bl	8005d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d110      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049cc:	f000 fc0e 	bl	80051ec <prvInitialiseTaskLists>
 80049d0:	e00d      	b.n	80049ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d802      	bhi.n	80049ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <prvAddNewTaskToReadyList+0xd4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <prvAddNewTaskToReadyList+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <prvAddNewTaskToReadyList+0xd4>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <prvAddNewTaskToReadyList+0xd8>)
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7ff f939 	bl	8003ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a30:	f001 f9da 	bl	8005de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d207      	bcs.n	8004a5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <prvAddNewTaskToReadyList+0xdc>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000bbc 	.word	0x20000bbc
 8004a68:	200006e8 	.word	0x200006e8
 8004a6c:	20000bc8 	.word	0x20000bc8
 8004a70:	20000bd8 	.word	0x20000bd8
 8004a74:	20000bc4 	.word	0x20000bc4
 8004a78:	200006ec 	.word	0x200006ec
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <vTaskDelay+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <vTaskDelay+0x2e>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	e7fe      	b.n	8004aac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004aae:	f000 f87f 	bl	8004bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fce3 	bl	8005480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004aba:	f000 f887 	bl	8004bcc <xTaskResumeAll>
 8004abe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <vTaskDelay+0x64>)
 8004ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000be4 	.word	0x20000be4
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004af6:	463a      	mov	r2, r7
 8004af8:	1d39      	adds	r1, r7, #4
 8004afa:	f107 0308 	add.w	r3, r7, #8
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f86e 	bl	8003be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	9202      	str	r2, [sp, #8]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	460a      	mov	r2, r1
 8004b16:	4920      	ldr	r1, [pc, #128]	; (8004b98 <vTaskStartScheduler+0xb0>)
 8004b18:	4820      	ldr	r0, [pc, #128]	; (8004b9c <vTaskStartScheduler+0xb4>)
 8004b1a:	f7ff fe1d 	bl	8004758 <xTaskCreateStatic>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <vTaskStartScheduler+0xb8>)
 8004b22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <vTaskStartScheduler+0xb8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e001      	b.n	8004b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b3c:	f000 fcf4 	bl	8005528 <xTimerCreateTimerTask>
 8004b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d115      	bne.n	8004b74 <vTaskStartScheduler+0x8c>
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <vTaskStartScheduler+0xbc>)
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <vTaskStartScheduler+0xc0>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <vTaskStartScheduler+0xc4>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b6e:	f001 f86f 	bl	8005c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b72:	e00d      	b.n	8004b90 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7a:	d109      	bne.n	8004b90 <vTaskStartScheduler+0xa8>
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e7fe      	b.n	8004b8e <vTaskStartScheduler+0xa6>
}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08006400 	.word	0x08006400
 8004b9c:	080051bd 	.word	0x080051bd
 8004ba0:	20000be0 	.word	0x20000be0
 8004ba4:	20000bdc 	.word	0x20000bdc
 8004ba8:	20000bc8 	.word	0x20000bc8
 8004bac:	20000bc0 	.word	0x20000bc0

08004bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <vTaskSuspendAll+0x18>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a03      	ldr	r2, [pc, #12]	; (8004bc8 <vTaskSuspendAll+0x18>)
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000be4 	.word	0x20000be4

08004bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <xTaskResumeAll+0x2a>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	e7fe      	b.n	8004bf4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bf6:	f001 f8c9 	bl	8005d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	4a37      	ldr	r2, [pc, #220]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004c02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c04:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <xTaskResumeAll+0x114>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d162      	bne.n	8004cd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <xTaskResumeAll+0x118>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05e      	beq.n	8004cd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c14:	e02f      	b.n	8004c76 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c16:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <xTaskResumeAll+0x11c>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3318      	adds	r3, #24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff f89a 	bl	8003d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff f895 	bl	8003d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <xTaskResumeAll+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d903      	bls.n	8004c46 <xTaskResumeAll+0x7a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <xTaskResumeAll+0x120>)
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <xTaskResumeAll+0x124>)
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7ff f820 	bl	8003ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <xTaskResumeAll+0x128>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <xTaskResumeAll+0x11c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1cb      	bne.n	8004c16 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c84:	f000 fb4c 	bl	8005320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c88:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <xTaskResumeAll+0x130>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c94:	f000 f846 	bl	8004d24 <xTaskIncrementTick>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c9e:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f1      	bne.n	8004c94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <xTaskResumeAll+0x130>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <xTaskResumeAll+0x12c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <xTaskResumeAll+0x134>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cd2:	f001 f889 	bl	8005de8 <vPortExitCritical>

	return xAlreadyYielded;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000be4 	.word	0x20000be4
 8004ce4:	20000bbc 	.word	0x20000bbc
 8004ce8:	20000b7c 	.word	0x20000b7c
 8004cec:	20000bc4 	.word	0x20000bc4
 8004cf0:	200006ec 	.word	0x200006ec
 8004cf4:	200006e8 	.word	0x200006e8
 8004cf8:	20000bd0 	.word	0x20000bd0
 8004cfc:	20000bcc 	.word	0x20000bcc
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <xTaskGetTickCount+0x1c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d10:	687b      	ldr	r3, [r7, #4]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000bc0 	.word	0x20000bc0

08004d24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2e:	4b51      	ldr	r3, [pc, #324]	; (8004e74 <xTaskIncrementTick+0x150>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f040 808d 	bne.w	8004e52 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d38:	4b4f      	ldr	r3, [pc, #316]	; (8004e78 <xTaskIncrementTick+0x154>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d40:	4a4d      	ldr	r2, [pc, #308]	; (8004e78 <xTaskIncrementTick+0x154>)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11f      	bne.n	8004d8c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <xTaskIncrementTick+0x158>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <xTaskIncrementTick+0x46>
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	e7fe      	b.n	8004d68 <xTaskIncrementTick+0x44>
 8004d6a:	4b44      	ldr	r3, [pc, #272]	; (8004e7c <xTaskIncrementTick+0x158>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <xTaskIncrementTick+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a41      	ldr	r2, [pc, #260]	; (8004e7c <xTaskIncrementTick+0x158>)
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4a41      	ldr	r2, [pc, #260]	; (8004e80 <xTaskIncrementTick+0x15c>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <xTaskIncrementTick+0x160>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a3f      	ldr	r2, [pc, #252]	; (8004e84 <xTaskIncrementTick+0x160>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	f000 faca 	bl	8005320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <xTaskIncrementTick+0x164>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d34e      	bcc.n	8004e34 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <xTaskIncrementTick+0x158>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <xTaskIncrementTick+0x80>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <xTaskIncrementTick+0x82>
 8004da4:	2300      	movs	r3, #0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004daa:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <xTaskIncrementTick+0x164>)
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db0:	601a      	str	r2, [r3, #0]
					break;
 8004db2:	e03f      	b.n	8004e34 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <xTaskIncrementTick+0x158>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d203      	bcs.n	8004dd4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dcc:	4a2e      	ldr	r2, [pc, #184]	; (8004e88 <xTaskIncrementTick+0x164>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
						break;
 8004dd2:	e02f      	b.n	8004e34 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe ffbf 	bl	8003d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3318      	adds	r3, #24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe ffb6 	bl	8003d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <xTaskIncrementTick+0x168>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d903      	bls.n	8004e04 <xTaskIncrementTick+0xe0>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <xTaskIncrementTick+0x168>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <xTaskIncrementTick+0x16c>)
 8004e12:	441a      	add	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7fe ff41 	bl	8003ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <xTaskIncrementTick+0x170>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d3b3      	bcc.n	8004d96 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e32:	e7b0      	b.n	8004d96 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <xTaskIncrementTick+0x170>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4915      	ldr	r1, [pc, #84]	; (8004e90 <xTaskIncrementTick+0x16c>)
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d907      	bls.n	8004e5c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e004      	b.n	8004e5c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <xTaskIncrementTick+0x174>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	4a0f      	ldr	r2, [pc, #60]	; (8004e98 <xTaskIncrementTick+0x174>)
 8004e5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <xTaskIncrementTick+0x178>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000be4 	.word	0x20000be4
 8004e78:	20000bc0 	.word	0x20000bc0
 8004e7c:	20000b74 	.word	0x20000b74
 8004e80:	20000b78 	.word	0x20000b78
 8004e84:	20000bd4 	.word	0x20000bd4
 8004e88:	20000bdc 	.word	0x20000bdc
 8004e8c:	20000bc4 	.word	0x20000bc4
 8004e90:	200006ec 	.word	0x200006ec
 8004e94:	200006e8 	.word	0x200006e8
 8004e98:	20000bcc 	.word	0x20000bcc
 8004e9c:	20000bd0 	.word	0x20000bd0

08004ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <vTaskSwitchContext+0xa4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eae:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <vTaskSwitchContext+0xa8>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004eb4:	e040      	b.n	8004f38 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <vTaskSwitchContext+0xa8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ebc:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <vTaskSwitchContext+0xac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e00f      	b.n	8004ee4 <vTaskSwitchContext+0x44>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <vTaskSwitchContext+0x3e>
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	e7fe      	b.n	8004edc <vTaskSwitchContext+0x3c>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	491a      	ldr	r1, [pc, #104]	; (8004f50 <vTaskSwitchContext+0xb0>)
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0e5      	beq.n	8004ec4 <vTaskSwitchContext+0x24>
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <vTaskSwitchContext+0xb0>)
 8004f04:	4413      	add	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d104      	bne.n	8004f28 <vTaskSwitchContext+0x88>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <vTaskSwitchContext+0xb4>)
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4a06      	ldr	r2, [pc, #24]	; (8004f4c <vTaskSwitchContext+0xac>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6013      	str	r3, [r2, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	20000be4 	.word	0x20000be4
 8004f48:	20000bd0 	.word	0x20000bd0
 8004f4c:	20000bc4 	.word	0x20000bc4
 8004f50:	200006ec 	.word	0x200006ec
 8004f54:	200006e8 	.word	0x200006e8

08004f58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <vTaskPlaceOnEventList+0x24>
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e7fe      	b.n	8004f7a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <vTaskPlaceOnEventList+0x44>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3318      	adds	r3, #24
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fe feb0 	bl	8003cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	6838      	ldr	r0, [r7, #0]
 8004f8e:	f000 fa77 	bl	8005480 <prvAddCurrentTaskToDelayedList>
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200006e8 	.word	0x200006e8

08004fa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <vTaskPlaceOnEventListRestricted+0x26>
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e7fe      	b.n	8004fc4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7fe fe67 	bl	8003ca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68b8      	ldr	r0, [r7, #8]
 8004fe4:	f000 fa4c 	bl	8005480 <prvAddCurrentTaskToDelayedList>
	}
 8004fe8:	bf00      	nop
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200006e8 	.word	0x200006e8

08004ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <xTaskRemoveFromEventList+0x2a>
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e7fe      	b.n	800501c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3318      	adds	r3, #24
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fe9a 	bl	8003d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <xTaskRemoveFromEventList+0xac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11d      	bne.n	800506c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7fe fe91 	bl	8003d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <xTaskRemoveFromEventList+0xb0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d903      	bls.n	800504e <xTaskRemoveFromEventList+0x5a>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <xTaskRemoveFromEventList+0xb0>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <xTaskRemoveFromEventList+0xb4>)
 800505c:	441a      	add	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe fe1c 	bl	8003ca2 <vListInsertEnd>
 800506a:	e005      	b.n	8005078 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3318      	adds	r3, #24
 8005070:	4619      	mov	r1, r3
 8005072:	480e      	ldr	r0, [pc, #56]	; (80050ac <xTaskRemoveFromEventList+0xb8>)
 8005074:	f7fe fe15 	bl	8003ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <xTaskRemoveFromEventList+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	429a      	cmp	r2, r3
 8005084:	d905      	bls.n	8005092 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <xTaskRemoveFromEventList+0xc0>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e001      	b.n	8005096 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000be4 	.word	0x20000be4
 80050a4:	20000bc4 	.word	0x20000bc4
 80050a8:	200006ec 	.word	0x200006ec
 80050ac:	20000b7c 	.word	0x20000b7c
 80050b0:	200006e8 	.word	0x200006e8
 80050b4:	20000bd0 	.word	0x20000bd0

080050b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <vTaskInternalSetTimeOutState+0x24>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <vTaskInternalSetTimeOutState+0x28>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000bd4 	.word	0x20000bd4
 80050e0:	20000bc0 	.word	0x20000bc0

080050e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <xTaskCheckForTimeOut+0x24>
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e7fe      	b.n	8005106 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <xTaskCheckForTimeOut+0x3e>
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e7fe      	b.n	8005120 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005122:	f000 fe33 	bl	8005d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <xTaskCheckForTimeOut+0xb8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513e:	d102      	bne.n	8005146 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e023      	b.n	800518e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <xTaskCheckForTimeOut+0xbc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d007      	beq.n	8005162 <xTaskCheckForTimeOut+0x7e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e015      	b.n	800518e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	429a      	cmp	r2, r3
 800516a:	d20b      	bcs.n	8005184 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ff9d 	bl	80050b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e004      	b.n	800518e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800518a:	2301      	movs	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800518e:	f000 fe2b 	bl	8005de8 <vPortExitCritical>

	return xReturn;
 8005192:	69fb      	ldr	r3, [r7, #28]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000bc0 	.word	0x20000bc0
 80051a0:	20000bd4 	.word	0x20000bd4

080051a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <vTaskMissedYield+0x14>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000bd0 	.word	0x20000bd0

080051bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c4:	f000 f852 	bl	800526c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <prvIdleTask+0x28>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d9f9      	bls.n	80051c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <prvIdleTask+0x2c>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051e0:	e7f0      	b.n	80051c4 <prvIdleTask+0x8>
 80051e2:	bf00      	nop
 80051e4:	200006ec 	.word	0x200006ec
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	e00c      	b.n	8005212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <prvInitialiseTaskLists+0x60>)
 8005204:	4413      	add	r3, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fd1e 	bl	8003c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3301      	adds	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b37      	cmp	r3, #55	; 0x37
 8005216:	d9ef      	bls.n	80051f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005218:	480d      	ldr	r0, [pc, #52]	; (8005250 <prvInitialiseTaskLists+0x64>)
 800521a:	f7fe fd15 	bl	8003c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521e:	480d      	ldr	r0, [pc, #52]	; (8005254 <prvInitialiseTaskLists+0x68>)
 8005220:	f7fe fd12 	bl	8003c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005224:	480c      	ldr	r0, [pc, #48]	; (8005258 <prvInitialiseTaskLists+0x6c>)
 8005226:	f7fe fd0f 	bl	8003c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800522a:	480c      	ldr	r0, [pc, #48]	; (800525c <prvInitialiseTaskLists+0x70>)
 800522c:	f7fe fd0c 	bl	8003c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005230:	480b      	ldr	r0, [pc, #44]	; (8005260 <prvInitialiseTaskLists+0x74>)
 8005232:	f7fe fd09 	bl	8003c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <prvInitialiseTaskLists+0x78>)
 8005238:	4a05      	ldr	r2, [pc, #20]	; (8005250 <prvInitialiseTaskLists+0x64>)
 800523a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <prvInitialiseTaskLists+0x7c>)
 800523e:	4a05      	ldr	r2, [pc, #20]	; (8005254 <prvInitialiseTaskLists+0x68>)
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200006ec 	.word	0x200006ec
 8005250:	20000b4c 	.word	0x20000b4c
 8005254:	20000b60 	.word	0x20000b60
 8005258:	20000b7c 	.word	0x20000b7c
 800525c:	20000b90 	.word	0x20000b90
 8005260:	20000ba8 	.word	0x20000ba8
 8005264:	20000b74 	.word	0x20000b74
 8005268:	20000b78 	.word	0x20000b78

0800526c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005272:	e019      	b.n	80052a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005274:	f000 fd8a 	bl	8005d8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <prvCheckTasksWaitingTermination+0x4c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fd69 	bl	8003d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvCheckTasksWaitingTermination+0x50>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <prvCheckTasksWaitingTermination+0x50>)
 8005292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <prvCheckTasksWaitingTermination+0x54>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3b01      	subs	r3, #1
 800529a:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <prvCheckTasksWaitingTermination+0x54>)
 800529c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800529e:	f000 fda3 	bl	8005de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f80e 	bl	80052c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <prvCheckTasksWaitingTermination+0x54>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e1      	bne.n	8005274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000b90 	.word	0x20000b90
 80052bc:	20000bbc 	.word	0x20000bbc
 80052c0:	20000ba4 	.word	0x20000ba4

080052c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 ff32 	bl	8006144 <vPortFree>
				vPortFree( pxTCB );
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 ff2f 	bl	8006144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052e6:	e017      	b.n	8005318 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d103      	bne.n	80052fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff26 	bl	8006144 <vPortFree>
	}
 80052f8:	e00e      	b.n	8005318 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005300:	2b02      	cmp	r3, #2
 8005302:	d009      	beq.n	8005318 <prvDeleteTCB+0x54>
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e7fe      	b.n	8005316 <prvDeleteTCB+0x52>
	}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <prvResetNextTaskUnblockTime+0x44>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <prvResetNextTaskUnblockTime+0x14>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <prvResetNextTaskUnblockTime+0x16>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <prvResetNextTaskUnblockTime+0x48>)
 800533c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005340:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005342:	e008      	b.n	8005356 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005344:	4b07      	ldr	r3, [pc, #28]	; (8005364 <prvResetNextTaskUnblockTime+0x44>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a05      	ldr	r2, [pc, #20]	; (8005368 <prvResetNextTaskUnblockTime+0x48>)
 8005354:	6013      	str	r3, [r2, #0]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000b74 	.word	0x20000b74
 8005368:	20000bdc 	.word	0x20000bdc

0800536c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <xTaskGetSchedulerState+0x34>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800537a:	2301      	movs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	e008      	b.n	8005392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <xTaskGetSchedulerState+0x38>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005388:	2302      	movs	r3, #2
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e001      	b.n	8005392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005392:	687b      	ldr	r3, [r7, #4]
	}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000bc8 	.word	0x20000bc8
 80053a4:	20000be4 	.word	0x20000be4

080053a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d054      	beq.n	8005468 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053be:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <xTaskPriorityDisinherit+0xcc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d009      	beq.n	80053dc <xTaskPriorityDisinherit+0x34>
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e7fe      	b.n	80053da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <xTaskPriorityDisinherit+0x50>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	e7fe      	b.n	80053f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	1e5a      	subs	r2, r3, #1
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	429a      	cmp	r2, r3
 800540c:	d02c      	beq.n	8005468 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005412:	2b00      	cmp	r3, #0
 8005414:	d128      	bne.n	8005468 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fc9e 	bl	8003d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <xTaskPriorityDisinherit+0xd0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d903      	bls.n	8005448 <xTaskPriorityDisinherit+0xa0>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <xTaskPriorityDisinherit+0xd0>)
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4a09      	ldr	r2, [pc, #36]	; (800547c <xTaskPriorityDisinherit+0xd4>)
 8005456:	441a      	add	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f7fe fc1f 	bl	8003ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005468:	697b      	ldr	r3, [r7, #20]
	}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200006e8 	.word	0x200006e8
 8005478:	20000bc4 	.word	0x20000bc4
 800547c:	200006ec 	.word	0x200006ec

08005480 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <prvAddCurrentTaskToDelayedList+0x90>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005490:	4b20      	ldr	r3, [pc, #128]	; (8005514 <prvAddCurrentTaskToDelayedList+0x94>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3304      	adds	r3, #4
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fc60 	bl	8003d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a2:	d10a      	bne.n	80054ba <prvAddCurrentTaskToDelayedList+0x3a>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054aa:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <prvAddCurrentTaskToDelayedList+0x94>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4819      	ldr	r0, [pc, #100]	; (8005518 <prvAddCurrentTaskToDelayedList+0x98>)
 80054b4:	f7fe fbf5 	bl	8003ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054b8:	e026      	b.n	8005508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d209      	bcs.n	80054e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <prvAddCurrentTaskToDelayedList+0x9c>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fe fc03 	bl	8003cea <vListInsert>
}
 80054e4:	e010      	b.n	8005508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvAddCurrentTaskToDelayedList+0x94>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fe fbf9 	bl	8003cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d202      	bcs.n	8005508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005502:	4a08      	ldr	r2, [pc, #32]	; (8005524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000bc0 	.word	0x20000bc0
 8005514:	200006e8 	.word	0x200006e8
 8005518:	20000ba8 	.word	0x20000ba8
 800551c:	20000b78 	.word	0x20000b78
 8005520:	20000b74 	.word	0x20000b74
 8005524:	20000bdc 	.word	0x20000bdc

08005528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005532:	f000 fac3 	bl	8005abc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005536:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <xTimerCreateTimerTask+0x80>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d021      	beq.n	8005582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005546:	1d3a      	adds	r2, r7, #4
 8005548:	f107 0108 	add.w	r1, r7, #8
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fb5f 	bl	8003c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	9202      	str	r2, [sp, #8]
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	2302      	movs	r3, #2
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	460a      	mov	r2, r1
 8005568:	4910      	ldr	r1, [pc, #64]	; (80055ac <xTimerCreateTimerTask+0x84>)
 800556a:	4811      	ldr	r0, [pc, #68]	; (80055b0 <xTimerCreateTimerTask+0x88>)
 800556c:	f7ff f8f4 	bl	8004758 <xTaskCreateStatic>
 8005570:	4602      	mov	r2, r0
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <xTimerCreateTimerTask+0x8c>)
 8005574:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <xTimerCreateTimerTask+0x8c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800557e:	2301      	movs	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d109      	bne.n	800559c <xTimerCreateTimerTask+0x74>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e7fe      	b.n	800559a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000c18 	.word	0x20000c18
 80055ac:	08006408 	.word	0x08006408
 80055b0:	080056d1 	.word	0x080056d1
 80055b4:	20000c1c 	.word	0x20000c1c

080055b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <xTimerGenericCommand+0x2c>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	e7fe      	b.n	80055e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055e4:	4b19      	ldr	r3, [pc, #100]	; (800564c <xTimerGenericCommand+0x94>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02a      	beq.n	8005642 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	dc18      	bgt.n	8005630 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055fe:	f7ff feb5 	bl	800536c <xTaskGetSchedulerState>
 8005602:	4603      	mov	r3, r0
 8005604:	2b02      	cmp	r3, #2
 8005606:	d109      	bne.n	800561c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <xTimerGenericCommand+0x94>)
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	f107 0110 	add.w	r1, r7, #16
 8005610:	2300      	movs	r3, #0
 8005612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005614:	f7fe fcca 	bl	8003fac <xQueueGenericSend>
 8005618:	6278      	str	r0, [r7, #36]	; 0x24
 800561a:	e012      	b.n	8005642 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <xTimerGenericCommand+0x94>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	f107 0110 	add.w	r1, r7, #16
 8005624:	2300      	movs	r3, #0
 8005626:	2200      	movs	r2, #0
 8005628:	f7fe fcc0 	bl	8003fac <xQueueGenericSend>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24
 800562e:	e008      	b.n	8005642 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <xTimerGenericCommand+0x94>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	f107 0110 	add.w	r1, r7, #16
 8005638:	2300      	movs	r3, #0
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	f7fe fdb0 	bl	80041a0 <xQueueGenericSendFromISR>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000c18 	.word	0x20000c18

08005650 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <prvProcessExpiredTimer+0x7c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fb77 	bl	8003d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d121      	bne.n	80056ba <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	18d1      	adds	r1, r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	6978      	ldr	r0, [r7, #20]
 8005684:	f000 f8c8 	bl	8005818 <prvInsertTimerInActiveList>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d015      	beq.n	80056ba <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2300      	movs	r3, #0
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	2100      	movs	r1, #0
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f7ff ff8d 	bl	80055b8 <xTimerGenericCommand>
 800569e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvProcessExpiredTimer+0x6a>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e7fe      	b.n	80056b8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	6978      	ldr	r0, [r7, #20]
 80056c0:	4798      	blx	r3
}
 80056c2:	bf00      	nop
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000c10 	.word	0x20000c10

080056d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f857 	bl	8005790 <prvGetNextExpireTime>
 80056e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4619      	mov	r1, r3
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f803 	bl	80056f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056ee:	f000 f8d5 	bl	800589c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f2:	e7f1      	b.n	80056d8 <prvTimerTask+0x8>

080056f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056fe:	f7ff fa57 	bl	8004bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f866 	bl	80057d8 <prvSampleTimeNow>
 800570c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d130      	bne.n	8005776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <prvProcessTimerOrBlockTask+0x3c>
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d806      	bhi.n	8005730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005722:	f7ff fa53 	bl	8004bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff91 	bl	8005650 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800572e:	e024      	b.n	800577a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <prvProcessTimerOrBlockTask+0x90>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <prvProcessTimerOrBlockTask+0x94>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	f7fe ffcb 	bl	80046f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800575a:	f7ff fa37 	bl	8004bcc <xTaskResumeAll>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <prvProcessTimerOrBlockTask+0x98>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
}
 8005774:	e001      	b.n	800577a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005776:	f7ff fa29 	bl	8004bcc <xTaskResumeAll>
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000c14 	.word	0x20000c14
 8005788:	20000c18 	.word	0x20000c18
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <prvGetNextExpireTime+0x44>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <prvGetNextExpireTime+0x44>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e001      	b.n	80057c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20000c10 	.word	0x20000c10

080057d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057e0:	f7ff fa90 	bl	8004d04 <xTaskGetTickCount>
 80057e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <prvSampleTimeNow+0x3c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d205      	bcs.n	80057fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057f0:	f000 f904 	bl	80059fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e002      	b.n	8005802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005802:	4a04      	ldr	r2, [pc, #16]	; (8005814 <prvSampleTimeNow+0x3c>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000c20 	.word	0x20000c20

08005818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d812      	bhi.n	8005864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e01b      	b.n	800588a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <prvInsertTimerInActiveList+0x7c>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe fa44 	bl	8003cea <vListInsert>
 8005862:	e012      	b.n	800588a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d206      	bcs.n	800587a <prvInsertTimerInActiveList+0x62>
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e007      	b.n	800588a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <prvInsertTimerInActiveList+0x80>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7fe fa30 	bl	8003cea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000c14 	.word	0x20000c14
 8005898:	20000c10 	.word	0x20000c10

0800589c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08e      	sub	sp, #56	; 0x38
 80058a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058a2:	e099      	b.n	80059d8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da17      	bge.n	80058da <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	3304      	adds	r3, #4
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvProcessReceivedCommands+0x2e>
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	e7fe      	b.n	80058c8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d0:	6850      	ldr	r0, [r2, #4]
 80058d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d4:	6892      	ldr	r2, [r2, #8]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db7a      	blt.n	80059d6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	3304      	adds	r3, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fa33 	bl	8003d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058f6:	463b      	mov	r3, r7
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff6d 	bl	80057d8 <prvSampleTimeNow>
 80058fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b09      	cmp	r3, #9
 8005904:	d868      	bhi.n	80059d8 <prvProcessReceivedCommands+0x13c>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <prvProcessReceivedCommands+0x70>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005935 	.word	0x08005935
 8005910:	08005935 	.word	0x08005935
 8005914:	08005935 	.word	0x08005935
 8005918:	080059d9 	.word	0x080059d9
 800591c:	0800598f 	.word	0x0800598f
 8005920:	080059c5 	.word	0x080059c5
 8005924:	08005935 	.word	0x08005935
 8005928:	08005935 	.word	0x08005935
 800592c:	080059d9 	.word	0x080059d9
 8005930:	0800598f 	.word	0x0800598f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	18d1      	adds	r1, r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005942:	f7ff ff69 	bl	8005818 <prvInsertTimerInActiveList>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d045      	beq.n	80059d8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005952:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d13d      	bne.n	80059d8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	441a      	add	r2, r3
 8005964:	2300      	movs	r3, #0
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2300      	movs	r3, #0
 800596a:	2100      	movs	r1, #0
 800596c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596e:	f7ff fe23 	bl	80055b8 <xTimerGenericCommand>
 8005972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d12e      	bne.n	80059d8 <prvProcessReceivedCommands+0x13c>
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e7fe      	b.n	800598c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <prvProcessReceivedCommands+0x114>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e7fe      	b.n	80059ae <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	18d1      	adds	r1, r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059be:	f7ff ff2b 	bl	8005818 <prvInsertTimerInActiveList>
					break;
 80059c2:	e009      	b.n	80059d8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80059ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d0:	f000 fbb8 	bl	8006144 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059d4:	e000      	b.n	80059d8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvProcessReceivedCommands+0x15c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	1d39      	adds	r1, r7, #4
 80059de:	2200      	movs	r2, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fc71 	bl	80042c8 <xQueueReceive>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f af5b 	bne.w	80058a4 <prvProcessReceivedCommands+0x8>
	}
}
 80059ee:	bf00      	nop
 80059f0:	3730      	adds	r7, #48	; 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000c18 	.word	0x20000c18

080059fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a02:	e044      	b.n	8005a8e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a04:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe f99d 	bl	8003d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d12d      	bne.n	8005a8e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d90e      	bls.n	8005a62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a50:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe f945 	bl	8003cea <vListInsert>
 8005a60:	e015      	b.n	8005a8e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fda3 	bl	80055b8 <xTimerGenericCommand>
 8005a72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <prvSwitchTimerLists+0x92>
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	e7fe      	b.n	8005a8c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1b5      	bne.n	8005a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <prvSwitchTimerLists+0xbc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <prvSwitchTimerLists+0xb8>)
 8005aa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005aa6:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <prvSwitchTimerLists+0xbc>)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000c10 	.word	0x20000c10
 8005ab8:	20000c14 	.word	0x20000c14

08005abc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ac2:	f000 f963 	bl	8005d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <prvCheckForValidListAndQueue+0x60>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d120      	bne.n	8005b10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ace:	4814      	ldr	r0, [pc, #80]	; (8005b20 <prvCheckForValidListAndQueue+0x64>)
 8005ad0:	f7fe f8ba 	bl	8003c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ad4:	4813      	ldr	r0, [pc, #76]	; (8005b24 <prvCheckForValidListAndQueue+0x68>)
 8005ad6:	f7fe f8b7 	bl	8003c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <prvCheckForValidListAndQueue+0x6c>)
 8005adc:	4a10      	ldr	r2, [pc, #64]	; (8005b20 <prvCheckForValidListAndQueue+0x64>)
 8005ade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <prvCheckForValidListAndQueue+0x70>)
 8005ae2:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <prvCheckForValidListAndQueue+0x68>)
 8005ae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <prvCheckForValidListAndQueue+0x74>)
 8005aec:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <prvCheckForValidListAndQueue+0x78>)
 8005aee:	2110      	movs	r1, #16
 8005af0:	200a      	movs	r0, #10
 8005af2:	f7fe f9c5 	bl	8003e80 <xQueueGenericCreateStatic>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <prvCheckForValidListAndQueue+0x60>)
 8005afa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <prvCheckForValidListAndQueue+0x60>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <prvCheckForValidListAndQueue+0x60>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	490b      	ldr	r1, [pc, #44]	; (8005b38 <prvCheckForValidListAndQueue+0x7c>)
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fdc8 	bl	80046a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b10:	f000 f96a 	bl	8005de8 <vPortExitCritical>
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000c18 	.word	0x20000c18
 8005b20:	20000be8 	.word	0x20000be8
 8005b24:	20000bfc 	.word	0x20000bfc
 8005b28:	20000c10 	.word	0x20000c10
 8005b2c:	20000c14 	.word	0x20000c14
 8005b30:	20000cc4 	.word	0x20000cc4
 8005b34:	20000c24 	.word	0x20000c24
 8005b38:	08006410 	.word	0x08006410

08005b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3b04      	subs	r3, #4
 8005b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3b04      	subs	r3, #4
 8005b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ba0 <pxPortInitialiseStack+0x64>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3b14      	subs	r3, #20
 8005b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f06f 0202 	mvn.w	r2, #2
 8005b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3b20      	subs	r3, #32
 8005b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	08005ba5 	.word	0x08005ba5

08005ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <prvTaskExitError+0x50>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb6:	d009      	beq.n	8005bcc <prvTaskExitError+0x28>
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e7fe      	b.n	8005bca <prvTaskExitError+0x26>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bde:	bf00      	nop
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0fc      	beq.n	8005be0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	2000000c 	.word	0x2000000c
	...

08005c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <pxCurrentTCBConst2>)
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	6808      	ldr	r0, [r1, #0]
 8005c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0a:	f380 8809 	msr	PSP, r0
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8811 	msr	BASEPRI, r0
 8005c1a:	4770      	bx	lr
 8005c1c:	f3af 8000 	nop.w

08005c20 <pxCurrentTCBConst2>:
 8005c20:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop

08005c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c28:	4808      	ldr	r0, [pc, #32]	; (8005c4c <prvPortStartFirstTask+0x24>)
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f380 8808 	msr	MSP, r0
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8814 	msr	CONTROL, r0
 8005c3a:	b662      	cpsie	i
 8005c3c:	b661      	cpsie	f
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	df00      	svc	0
 8005c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c4a:	bf00      	nop
 8005c4c:	e000ed08 	.word	0xe000ed08

08005c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c56:	4b44      	ldr	r3, [pc, #272]	; (8005d68 <xPortStartScheduler+0x118>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a44      	ldr	r2, [pc, #272]	; (8005d6c <xPortStartScheduler+0x11c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d109      	bne.n	8005c74 <xPortStartScheduler+0x24>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e7fe      	b.n	8005c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c74:	4b3c      	ldr	r3, [pc, #240]	; (8005d68 <xPortStartScheduler+0x118>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <xPortStartScheduler+0x120>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d109      	bne.n	8005c92 <xPortStartScheduler+0x42>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e7fe      	b.n	8005c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c92:	4b38      	ldr	r3, [pc, #224]	; (8005d74 <xPortStartScheduler+0x124>)
 8005c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <xPortStartScheduler+0x128>)
 8005cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cc0:	e009      	b.n	8005cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d0ef      	beq.n	8005cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1c3 0307 	rsb	r3, r3, #7
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d009      	beq.n	8005d02 <xPortStartScheduler+0xb2>
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	e7fe      	b.n	8005d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d02:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d14:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <xPortStartScheduler+0x12c>)
 8005d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d20:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <xPortStartScheduler+0x130>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <xPortStartScheduler+0x130>)
 8005d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <xPortStartScheduler+0x130>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a13      	ldr	r2, [pc, #76]	; (8005d80 <xPortStartScheduler+0x130>)
 8005d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d38:	f000 f8d6 	bl	8005ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <xPortStartScheduler+0x134>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d42:	f000 f8f5 	bl	8005f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <xPortStartScheduler+0x138>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <xPortStartScheduler+0x138>)
 8005d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d52:	f7ff ff69 	bl	8005c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d56:	f7ff f8a3 	bl	8004ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8005d5a:	f7ff ff23 	bl	8005ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	e000ed00 	.word	0xe000ed00
 8005d6c:	410fc271 	.word	0x410fc271
 8005d70:	410fc270 	.word	0x410fc270
 8005d74:	e000e400 	.word	0xe000e400
 8005d78:	20000d14 	.word	0x20000d14
 8005d7c:	20000d18 	.word	0x20000d18
 8005d80:	e000ed20 	.word	0xe000ed20
 8005d84:	2000000c 	.word	0x2000000c
 8005d88:	e000ef34 	.word	0xe000ef34

08005d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <vPortEnterCritical+0x54>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	4a0d      	ldr	r2, [pc, #52]	; (8005de0 <vPortEnterCritical+0x54>)
 8005dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dae:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <vPortEnterCritical+0x54>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10e      	bne.n	8005dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <vPortEnterCritical+0x58>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <vPortEnterCritical+0x48>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	e7fe      	b.n	8005dd2 <vPortEnterCritical+0x46>
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <vPortExitCritical+0x4c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <vPortExitCritical+0x22>
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	e7fe      	b.n	8005e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <vPortExitCritical+0x4c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <vPortExitCritical+0x4c>)
 8005e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <vPortExitCritical+0x4c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <vPortExitCritical+0x3e>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c
	...

08005e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e40:	f3ef 8009 	mrs	r0, PSP
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <pxCurrentTCBConst>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f01e 0f10 	tst.w	lr, #16
 8005e50:	bf08      	it	eq
 8005e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	6010      	str	r0, [r2, #0]
 8005e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e64:	f380 8811 	msr	BASEPRI, r0
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f7ff f816 	bl	8004ea0 <vTaskSwitchContext>
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f380 8811 	msr	BASEPRI, r0
 8005e7c:	bc09      	pop	{r0, r3}
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	f01e 0f10 	tst.w	lr, #16
 8005e8a:	bf08      	it	eq
 8005e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e90:	f380 8809 	msr	PSP, r0
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst>:
 8005ea0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ec0:	f7fe ff30 	bl	8004d24 <xTaskIncrementTick>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <SysTick_Handler+0x3c>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <vPortSetupTimerInterrupt+0x34>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <vPortSetupTimerInterrupt+0x38>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <vPortSetupTimerInterrupt+0x3c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <vPortSetupTimerInterrupt+0x40>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <vPortSetupTimerInterrupt+0x44>)
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f0a:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <vPortSetupTimerInterrupt+0x34>)
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e010 	.word	0xe000e010
 8005f20:	e000e018 	.word	0xe000e018
 8005f24:	20000000 	.word	0x20000000
 8005f28:	10624dd3 	.word	0x10624dd3
 8005f2c:	e000e014 	.word	0xe000e014

08005f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f40 <vPortEnableVFP+0x10>
 8005f34:	6801      	ldr	r1, [r0, #0]
 8005f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f3a:	6001      	str	r1, [r0, #0]
 8005f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f3e:	bf00      	nop
 8005f40:	e000ed88 	.word	0xe000ed88

08005f44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f4a:	f3ef 8305 	mrs	r3, IPSR
 8005f4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d913      	bls.n	8005f7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <vPortValidateInterruptPriority+0x6c>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f60:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <vPortValidateInterruptPriority+0x70>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	7afa      	ldrb	r2, [r7, #11]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d209      	bcs.n	8005f7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	e7fe      	b.n	8005f7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <vPortValidateInterruptPriority+0x74>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <vPortValidateInterruptPriority+0x78>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d909      	bls.n	8005fa2 <vPortValidateInterruptPriority+0x5e>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	e7fe      	b.n	8005fa0 <vPortValidateInterruptPriority+0x5c>
	}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e3f0 	.word	0xe000e3f0
 8005fb4:	20000d14 	.word	0x20000d14
 8005fb8:	e000ed0c 	.word	0xe000ed0c
 8005fbc:	20000d18 	.word	0x20000d18

08005fc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fcc:	f7fe fdf0 	bl	8004bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fd0:	4b57      	ldr	r3, [pc, #348]	; (8006130 <pvPortMalloc+0x170>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd8:	f000 f90c 	bl	80061f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fdc:	4b55      	ldr	r3, [pc, #340]	; (8006134 <pvPortMalloc+0x174>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 808c 	bne.w	8006102 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01c      	beq.n	800602a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d013      	beq.n	800602a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f023 0307 	bic.w	r3, r3, #7
 8006008:	3308      	adds	r3, #8
 800600a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <pvPortMalloc+0x6a>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e7fe      	b.n	8006028 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d068      	beq.n	8006102 <pvPortMalloc+0x142>
 8006030:	4b41      	ldr	r3, [pc, #260]	; (8006138 <pvPortMalloc+0x178>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d863      	bhi.n	8006102 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800603a:	4b40      	ldr	r3, [pc, #256]	; (800613c <pvPortMalloc+0x17c>)
 800603c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800603e:	4b3f      	ldr	r3, [pc, #252]	; (800613c <pvPortMalloc+0x17c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006044:	e004      	b.n	8006050 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d903      	bls.n	8006062 <pvPortMalloc+0xa2>
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f1      	bne.n	8006046 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006062:	4b33      	ldr	r3, [pc, #204]	; (8006130 <pvPortMalloc+0x170>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	429a      	cmp	r2, r3
 800606a:	d04a      	beq.n	8006102 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2208      	movs	r2, #8
 8006072:	4413      	add	r3, r2
 8006074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	2308      	movs	r3, #8
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	429a      	cmp	r2, r3
 800608c:	d91e      	bls.n	80060cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	2b00      	cmp	r3, #0
 800609e:	d009      	beq.n	80060b4 <pvPortMalloc+0xf4>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e7fe      	b.n	80060b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c6:	69b8      	ldr	r0, [r7, #24]
 80060c8:	f000 f8f6 	bl	80062b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <pvPortMalloc+0x178>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <pvPortMalloc+0x178>)
 80060d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <pvPortMalloc+0x178>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b18      	ldr	r3, [pc, #96]	; (8006140 <pvPortMalloc+0x180>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d203      	bcs.n	80060ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <pvPortMalloc+0x178>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <pvPortMalloc+0x180>)
 80060ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <pvPortMalloc+0x174>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006102:	f7fe fd63 	bl	8004bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <pvPortMalloc+0x164>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e7fe      	b.n	8006122 <pvPortMalloc+0x162>
	return pvReturn;
 8006124:	69fb      	ldr	r3, [r7, #28]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20001924 	.word	0x20001924
 8006134:	20001930 	.word	0x20001930
 8006138:	20001928 	.word	0x20001928
 800613c:	2000191c 	.word	0x2000191c
 8006140:	2000192c 	.word	0x2000192c

08006144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d046      	beq.n	80061e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006156:	2308      	movs	r3, #8
 8006158:	425b      	negs	r3, r3
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	4b20      	ldr	r3, [pc, #128]	; (80061ec <vPortFree+0xa8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <vPortFree+0x42>
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e7fe      	b.n	8006184 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <vPortFree+0x5e>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	e7fe      	b.n	80061a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <vPortFree+0xa8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d115      	bne.n	80061e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <vPortFree+0xa8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	401a      	ands	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061c8:	f7fe fcf2 	bl	8004bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <vPortFree+0xac>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <vPortFree+0xac>)
 80061d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061da:	6938      	ldr	r0, [r7, #16]
 80061dc:	f000 f86c 	bl	80062b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061e0:	f7fe fcf4 	bl	8004bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20001930 	.word	0x20001930
 80061f0:	20001928 	.word	0x20001928

080061f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <prvHeapInit+0xac>)
 8006202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3307      	adds	r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <prvHeapInit+0xac>)
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <prvHeapInit+0xb0>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <prvHeapInit+0xb0>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006240:	2208      	movs	r2, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <prvHeapInit+0xb4>)
 8006254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <prvHeapInit+0xb4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <prvHeapInit+0xb4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvHeapInit+0xb4>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <prvHeapInit+0xb8>)
 8006282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <prvHeapInit+0xbc>)
 800628a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <prvHeapInit+0xc0>)
 800628e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20000d1c 	.word	0x20000d1c
 80062a4:	2000191c 	.word	0x2000191c
 80062a8:	20001924 	.word	0x20001924
 80062ac:	2000192c 	.word	0x2000192c
 80062b0:	20001928 	.word	0x20001928
 80062b4:	20001930 	.word	0x20001930

080062b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062c0:	4b28      	ldr	r3, [pc, #160]	; (8006364 <prvInsertBlockIntoFreeList+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <prvInsertBlockIntoFreeList+0x14>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d8f7      	bhi.n	80062c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d108      	bne.n	80062fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	441a      	add	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d118      	bne.n	8006340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d00d      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e008      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e003      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d002      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000191c 	.word	0x2000191c
 8006368:	20001924 	.word	0x20001924

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	4e0d      	ldr	r6, [pc, #52]	; (80063a4 <__libc_init_array+0x38>)
 8006370:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006372:	1ba4      	subs	r4, r4, r6
 8006374:	10a4      	asrs	r4, r4, #2
 8006376:	2500      	movs	r5, #0
 8006378:	42a5      	cmp	r5, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	4e0b      	ldr	r6, [pc, #44]	; (80063ac <__libc_init_array+0x40>)
 800637e:	4c0c      	ldr	r4, [pc, #48]	; (80063b0 <__libc_init_array+0x44>)
 8006380:	f000 f82c 	bl	80063dc <_init>
 8006384:	1ba4      	subs	r4, r4, r6
 8006386:	10a4      	asrs	r4, r4, #2
 8006388:	2500      	movs	r5, #0
 800638a:	42a5      	cmp	r5, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006394:	4798      	blx	r3
 8006396:	3501      	adds	r5, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800639e:	4798      	blx	r3
 80063a0:	3501      	adds	r5, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	08006474 	.word	0x08006474
 80063a8:	08006474 	.word	0x08006474
 80063ac:	08006474 	.word	0x08006474
 80063b0:	08006478 	.word	0x08006478

080063b4 <memcpy>:
 80063b4:	b510      	push	{r4, lr}
 80063b6:	1e43      	subs	r3, r0, #1
 80063b8:	440a      	add	r2, r1
 80063ba:	4291      	cmp	r1, r2
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	bd10      	pop	{r4, pc}
 80063c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c8:	e7f7      	b.n	80063ba <memcpy+0x6>

080063ca <memset>:
 80063ca:	4402      	add	r2, r0
 80063cc:	4603      	mov	r3, r0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d100      	bne.n	80063d4 <memset+0xa>
 80063d2:	4770      	bx	lr
 80063d4:	f803 1b01 	strb.w	r1, [r3], #1
 80063d8:	e7f9      	b.n	80063ce <memset+0x4>
	...

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
